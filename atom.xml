<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒋彦涛的个人博客</title>
  
  <subtitle>Code 4 Android / ...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.code4a.com/"/>
  <updated>2020-03-27T09:38:22.829Z</updated>
  <id>http://www.code4a.com/</id>
  
  <author>
    <name>code4a</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="http://www.code4a.com/2020/03/27/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.code4a.com/2020/03/27/Docker常用命令/</id>
    <published>2020-03-27T09:37:34.000Z</published>
    <updated>2020-03-27T09:38:22.829Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-查询本地已有镜像"><a href="#1-查询本地已有镜像" class="headerlink" title="1. 查询本地已有镜像"></a>1. 查询本地已有镜像</h4><p><code>docker images</code></p><h4 id="2-查看本地所有容器"><a href="#2-查看本地所有容器" class="headerlink" title="2. 查看本地所有容器"></a>2. 查看本地所有容器</h4><p><code>docker ps -a</code></p><h4 id="3-启动镜像，并获取一个伪终端"><a href="#3-启动镜像，并获取一个伪终端" class="headerlink" title="3. 启动镜像，并获取一个伪终端"></a>3. 启动镜像，并获取一个伪终端</h4><h5 id="注意：实际启动的是容器，启动镜像时会自动创建新容器并启动。"><a href="#注意：实际启动的是容器，启动镜像时会自动创建新容器并启动。" class="headerlink" title="注意：实际启动的是容器，启动镜像时会自动创建新容器并启动。"></a>注意：实际启动的是容器，启动镜像时会自动创建新容器并启动。</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -it <span class="params">&lt;REPOSITORY:TAG&gt;</span> <span class="meta-keyword">/bin/</span>bash   <span class="comment">//使用  仓库名+标签 启动`</span></span><br><span class="line">sudo docker run -it <span class="params">&lt;IMAGE ID&gt;</span> <span class="meta-keyword">/bin/</span>bash     <span class="comment">//使用 IMAGE ID 启动</span></span><br></pre></td></tr></table></figure><h4 id="4-退出镜像"><a href="#4-退出镜像" class="headerlink" title="4. 退出镜像"></a>4. 退出镜像</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">exit</span>   <span class="regexp">//</span>或使用快捷键 Ctrl + D</span><br></pre></td></tr></table></figure><h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><ol><li>这里使用 <code>&gt;&gt;</code>符号，表示命令在docker的伪终端中执行。</li></ol><h4 id="5-启动容器"><a href="#5-启动容器" class="headerlink" title="5. 启动容器"></a>5. 启动容器</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="keyword">start</span> &lt;<span class="keyword">CONTAINER</span> <span class="keyword">ID</span>&gt; //使用 <span class="keyword">CONTAINER</span> <span class="keyword">ID</span> 启动</span><br><span class="line">sudo docker exec -it &lt;<span class="keyword">CONTAINER</span> <span class="keyword">ID</span>&gt; // 链接到容器，并获取一个伪终端</span><br></pre></td></tr></table></figure><h4 id="6-退出容器"><a href="#6-退出容器" class="headerlink" title="6. 退出容器"></a>6. 退出容器</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="keyword">stop</span> &lt;<span class="keyword">CONTAINER</span> <span class="keyword">ID</span>&gt;  //停止</span><br><span class="line">sudo docker <span class="keyword">kill</span> &lt;<span class="keyword">CONTAINER</span> <span class="keyword">ID</span>&gt;  //杀死运行的容器</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-查询本地已有镜像&quot;&gt;&lt;a href=&quot;#1-查询本地已有镜像&quot; class=&quot;headerlink&quot; title=&quot;1. 查询本地已有镜像&quot;&gt;&lt;/a&gt;1. 查询本地已有镜像&lt;/h4&gt;&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt;&lt;/p&gt;
&lt;h4 i
      
    
    </summary>
    
      <category term="Docker" scheme="http://www.code4a.com/categories/Docker/"/>
    
    
      <category term="Tools" scheme="http://www.code4a.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Android投屏工具Scrcpy常用命令</title>
    <link href="http://www.code4a.com/2020/03/27/Android%E6%8A%95%E5%B1%8F%E5%B7%A5%E5%85%B7Scrcpy%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.code4a.com/2020/03/27/Android投屏工具Scrcpy常用命令/</id>
    <published>2020-03-27T09:33:38.000Z</published>
    <updated>2020-03-27T09:34:52.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android无需Root的跨平台投屏工具-Scrcpy"><a href="#Android无需Root的跨平台投屏工具-Scrcpy" class="headerlink" title="Android无需Root的跨平台投屏工具-Scrcpy"></a>Android无需Root的跨平台投屏工具-<a href="https://github.com/Genymobile/scrcpy" target="_blank" rel="noopener">Scrcpy</a></h2><h3 id="Mac-OS-可直接通过Homebrew安装"><a href="#Mac-OS-可直接通过Homebrew安装" class="headerlink" title="Mac OS 可直接通过Homebrew安装"></a>Mac OS 可直接通过Homebrew安装</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install scrcpy <span class="comment">// 安装</span></span><br><span class="line">brew upgrade scrcpy <span class="comment">// 升级</span></span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scrcpy</span> <span class="comment">// 启动</span></span><br><span class="line"><span class="selector-tag">scrcpy</span> <span class="selector-tag">-s</span> <span class="selector-tag">a117</span>** <span class="comment">// 多个设备时指定 adb devices -l 显示的序列号</span></span><br><span class="line"><span class="selector-tag">scrcpy</span> <span class="selector-tag">-p</span> <span class="selector-tag">20927</span> <span class="comment">// 设置端口</span></span><br><span class="line"><span class="selector-tag">scrcpy</span> <span class="selector-tag">--help</span> <span class="comment">// 查看帮助</span></span><br><span class="line"><span class="selector-tag">scrcpy</span> <span class="selector-tag">-b</span> <span class="selector-tag">8M</span> <span class="comment">//设置码率 默认8M</span></span><br><span class="line"><span class="selector-tag">scrcpy</span> <span class="selector-tag">-m</span> <span class="selector-tag">1024</span> <span class="comment">//限制投屏尺寸</span></span><br><span class="line"><span class="selector-tag">scrcpy</span> <span class="selector-tag">-c</span> <span class="selector-tag">800</span><span class="selector-pseudo">:800</span><span class="selector-pseudo">:0</span><span class="selector-pseudo">:0</span> <span class="comment">// 裁剪投屏屏幕 (长:宽:偏移x:偏移y)</span></span><br><span class="line"><span class="selector-tag">scrcpy</span> <span class="selector-tag">-r</span> <span class="selector-tag">file</span><span class="selector-class">.mp4</span> <span class="comment">// 投屏并录屏</span></span><br><span class="line"><span class="selector-tag">scrcpy</span> <span class="selector-tag">-Nr</span> <span class="selector-tag">file</span><span class="selector-class">.mp4</span> <span class="comment">//不投屏只录屏</span></span><br><span class="line"><span class="selector-tag">scrcpy</span> <span class="selector-tag">-t</span> <span class="comment">// 手指触摸的时候显示轨迹球</span></span><br><span class="line"><span class="selector-tag">scrcpy</span> <span class="selector-tag">-v</span> <span class="comment">// 显示版本信息</span></span><br></pre></td></tr></table></figure><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><table><thead><tr><th>Action</th><th>Shortcut</th></tr></thead><tbody><tr><td>切换全屏</td><td><code>Ctrl + f</code></td></tr><tr><td>将窗口调整为1:1（完美像素）</td><td><code>Ctrl + g</code></td></tr><tr><td>调整窗口大小以删除黑色边框</td><td>`Ctrl + x</td><td>双击黑色背景`</td></tr><tr><td>设备<code>HOME</code>键</td><td>`Ctrl + h</td><td>鼠标中键`</td></tr><tr><td>设备<code>BACK</code>键</td><td>`Ctrl + b</td><td>鼠标右键`</td></tr><tr><td>设备<code>任务管理</code>键</td><td><code>Ctrl + s</code></td></tr><tr><td>设备<code>菜单</code>键</td><td><code>Ctrl + m</code></td></tr><tr><td>设备<code>音量+</code>键</td><td><code>Ctrl + ↑</code></td></tr><tr><td>设备<code>音量-</code>键</td><td><code>Ctrl + ↓</code></td></tr><tr><td>设备<code>电源</code>键</td><td><code>Ctrl + p</code></td></tr><tr><td>点亮手机屏幕</td><td>鼠标右键</td></tr><tr><td>复制内容到设备</td><td><code>Ctrl + v</code></td></tr><tr><td>启用/禁用FPS计数器(stdout)</td><td><code>Ctrl + i</code></td></tr></tbody></table><h5 id="安装APK将apk文件拖入屏幕，如果为传输文件到设备，直接拖拽非apk的文件到屏幕"><a href="#安装APK将apk文件拖入屏幕，如果为传输文件到设备，直接拖拽非apk的文件到屏幕" class="headerlink" title="安装APK将apk文件拖入屏幕，如果为传输文件到设备，直接拖拽非apk的文件到屏幕"></a>安装APK将apk文件拖入屏幕，如果为传输文件到设备，直接拖拽非apk的文件到屏幕</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Android无需Root的跨平台投屏工具-Scrcpy&quot;&gt;&lt;a href=&quot;#Android无需Root的跨平台投屏工具-Scrcpy&quot; class=&quot;headerlink&quot; title=&quot;Android无需Root的跨平台投屏工具-Scrcpy&quot;&gt;&lt;/a&gt;An
      
    
    </summary>
    
      <category term="Android" scheme="http://www.code4a.com/categories/Android/"/>
    
    
      <category term="Tools" scheme="http://www.code4a.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>AbstractProcessor：利用注解动态生成代码</title>
    <link href="http://www.code4a.com/2020/03/27/AbstractProcessor%EF%BC%9A%E5%88%A9%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/"/>
    <id>http://www.code4a.com/2020/03/27/AbstractProcessor：利用注解动态生成代码/</id>
    <published>2020-03-27T09:17:51.000Z</published>
    <updated>2020-03-27T09:21:30.145Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>按照处理时期，注解分为两种类型，一种是运行时注解，另一种是编译时注解。</p></blockquote><blockquote><p>编译时注解的核心依赖APT(Annotation Processing Tools)实现，对应的处理流程为：</p><ol><li>在某些代码元素上（如类型、函数、字段等）添加注解；</li><li>编译时编译器会检查AbstractProcessor的子类，然后将添加了注解的所有元素都传递到该类的process函数中；</li><li>使得开发人员可以在编译器进行相应的处理。例如，使用注解生成新的Java类，这也就是EventBus、Retrofit、Dragger等开源库的基本原理。</li></ol></blockquote><h3 id="1-创建Java-Library"><a href="#1-创建Java-Library" class="headerlink" title="1. 创建Java Library"></a>1. 创建Java Library</h3><blockquote><p>Java API已经提供了扫描源码并解析注解的框架，我们只需继承AbstractProcessor类来实现解析注解相关的逻辑。</p></blockquote><ol><li>创建Java Library <strong>sim-annotation</strong>，自动生成的 <code>build.gradle</code>内容如下：</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'java-library'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解决兼容性的问题</span></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="string">"7"</span></span><br><span class="line"><span class="keyword">targetCompatibility</span> = <span class="string">"7"</span></span><br></pre></td></tr></table></figure><ol><li>创建一个注解类：</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.code4a.sim.<span class="keyword">annotation</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">annotation</span>.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">annotation</span>.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">annotation</span>.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">annotation</span>.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc: 注解示例代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Create by jiang&lt;a href="mailto:jiangyantaodev@163.com"&gt;Contact me.&lt;/a&gt; on 2020/3/26</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Version: 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 元素类型为字段</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="comment">// 编译时注解</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Sima &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标记参数名称或者服务名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 名称，默认为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String name() <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果必须，当值为null时会导致app崩溃，此时默认值为false</span></span><br><span class="line"><span class="comment">     * 原始类型不会被检查</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否必须，默认为否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    boolean required() <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字段描述</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 描述，默认为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String desc() <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建Java Library <strong>sim-compiler</strong>，自动生成 <code>build.gradle</code>并添加依赖<code>sim-annotation</code>内容如下：</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'java-library'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="keyword">project</span>(path: <span class="string">':sim-annotation'</span>)</span><br><span class="line">    <span class="comment">// AutoService注解处理器是Google开发的，用来生成 META-INF/services/javax.annotation.processing.Processor 文件的，</span></span><br><span class="line">    <span class="comment">// 你只需要在你定义的注解处理器上添加 @AutoService(Processor.class) 就可以了</span></span><br><span class="line">    implementation <span class="string">'com.google.auto.service:auto-service:1.0-rc6'</span></span><br><span class="line">    <span class="comment">// 在Gradle Wrapper 5.0将忽略compile classpath中的annotation processor，需要手动添加到annotation processor path</span></span><br><span class="line">    annotationProcessor <span class="string">'com.google.auto.service:auto-service:1.0-rc6'</span></span><br><span class="line">    <span class="comment">// 可以高效的生成java代码，替代StringBuilder方案</span></span><br><span class="line">    implementation <span class="string">'com.squareup:javapoet:1.12.1'</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="string">"7"</span></span><br><span class="line"><span class="keyword">targetCompatibility</span> = <span class="string">"7"</span></span><br></pre></td></tr></table></figure><ol><li>首先创建一个注解器基类：</li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.code4a.sim.compiler.processor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.code4a.sim.compiler.utils.Consts;</span><br><span class="line"><span class="keyword">import</span> com.code4a.sim.compiler.utils.Logger;</span><br><span class="line"><span class="keyword">import</span> com.code4a.sim.compiler.utils.MapUtils;</span><br><span class="line"><span class="keyword">import</span> com.code4a.sim.compiler.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.code4a.sim.compiler.utils.TypeUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.AbstractProcessor;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.Filer;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.ProcessingEnvironment;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.SourceVersion;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.util.Elements;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.util.Types;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc: 注解处理器基类，汇总一些公共方法和操作</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;每一个注解处理器类都必须有一个空的构造函数。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Create by jiang&lt;a href="mailto:jiangyantaodev@163.com"&gt;Contact me.&lt;/a&gt; on 2020/3/26</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Version: 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Filer mFiler;</span><br><span class="line">    Logger logger;</span><br><span class="line">    Types types;</span><br><span class="line">    Elements elementUtils;</span><br><span class="line">    TypeUtils typeUtils;</span><br><span class="line">    <span class="comment">// Module name, maybe its 'app' or others</span></span><br><span class="line">    String moduleName = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// If need generate sim doc</span></span><br><span class="line">    <span class="keyword">boolean</span> generateDoc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个注解处理器类都有一个特殊的init()方法，他会被注解处理工具调用，并传入&#123;<span class="doctag">@link</span> ProcessingEnvironment&#125;参数.</span></span><br><span class="line"><span class="comment">     * ProcessingEnvironment提供很多有用的工具类&#123;<span class="doctag">@link</span> javax.lang.model.util.Elements&#125;、&#123;<span class="doctag">@link</span> javax.lang.model.util.Types&#125;、&#123;<span class="doctag">@link</span> javax.annotation.processing.Filer&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processingEnv</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取ProcessingEnvironment提供的工具类</span></span><br><span class="line">        mFiler = processingEnv.getFiler();</span><br><span class="line">        types = processingEnv.getTypeUtils();</span><br><span class="line">        elementUtils = processingEnv.getElementUtils();</span><br><span class="line">        typeUtils = <span class="keyword">new</span> TypeUtils(types, elementUtils);</span><br><span class="line">        logger = <span class="keyword">new</span> Logger(processingEnv.getMessager());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Attempt to get user configuration [moduleName]</span></span><br><span class="line">        Map&lt;String, String&gt; options = processingEnv.getOptions();</span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isNotEmpty(options)) &#123;</span><br><span class="line">            moduleName = options.get(Consts.KEY_MODULE_NAME);</span><br><span class="line">            generateDoc = Consts.VALUE_ENABLE.equals(options.get(Consts.KEY_GENERATE_DOC_NAME));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(moduleName)) &#123;</span><br><span class="line">            moduleName = moduleName.replaceAll(<span class="string">"[^0-9a-zA-Z_]+"</span>, <span class="string">""</span>);</span><br><span class="line">            logger.info(<span class="string">"The user has configuration the module name, it was ["</span> + moduleName + <span class="string">"]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.<span class="keyword">error</span>(Consts.NO_MODULE_NAME_TIPS);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Sim::Compiler &gt;&gt;&gt; No module name, for more information, look at gradle log."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来指定你使用的Java版本。通常这里返回SourceVersion.latestSupported()。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java 最新支持版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> SourceVersion.<span class="title">latestSupported</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取支持的配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 支持的配置字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; getSupportedOptions() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;String&gt;() &#123;&#123;</span><br><span class="line">            <span class="keyword">this</span>.add(Consts.KEY_MODULE_NAME);</span><br><span class="line">            <span class="keyword">this</span>.add(Consts.KEY_GENERATE_DOC_NAME);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建<code>com.code4a.sim.annotation.Sima</code>注解对应的注解处理器</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.code4a.sim.compiler.processor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.code4a.sim.<span class="keyword">annotation</span>.Sima;</span><br><span class="line"><span class="keyword">import</span> com.code4a.sim.compiler.utils.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> com.code4a.sim.compiler.utils.Consts;</span><br><span class="line"><span class="keyword">import</span> com.code4a.sim.compiler.utils.MapUtils;</span><br><span class="line"><span class="keyword">import</span> com.google.auto.service.AutoService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.<span class="keyword">annotation</span>.processing.ProcessingEnvironment;</span><br><span class="line"><span class="keyword">import</span> javax.<span class="keyword">annotation</span>.processing.Processor;</span><br><span class="line"><span class="keyword">import</span> javax.<span class="keyword">annotation</span>.processing.RoundEnvironment;</span><br><span class="line"><span class="keyword">import</span> javax.<span class="keyword">annotation</span>.processing.SupportedAnnotationTypes;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.Element;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.Modifier;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.TypeElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc: Processor used to create sima helper</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;SupportedAnnotationTypes指定该注解处理器可以解决的类型，需要完整的包名+类命&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Create by jiang&lt;a href="mailto:jiangyantaodev@163.com"&gt;Contact me.&lt;/a&gt; on 2020/3/26</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Version: 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// AutoService用来生成 META-INF/services/javax.annotation.processing.Processor 文件</span></span><br><span class="line"><span class="meta">@AutoService(Processor.class)</span></span><br><span class="line"><span class="meta">@SupportedAnnotationTypes(&#123;Consts.ANNOTATION_TYPE_SIMA&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimaProcessor</span> <span class="title">extends</span> <span class="title">BaseProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Contain field need sima and his super class.</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;TypeElement, List&lt;Element&gt;&gt; parentAndChild = new HashMap&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> synchronized void init(ProcessingEnvironment processingEnv) &#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; SimaProcessor init. &lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解处理器入口类。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;在这里写你的扫描、评估和处理注解的代码，以及生成Java文件&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotations 需要处理的注释类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roundEnv    可以查询出包含特定注解的被注解元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 该注解处理器是否声明一组注释类型。</span></span><br><span class="line"><span class="comment">     * 如果返回 true，则这些注解已声明并且不要求后续 Processor 处理它们；</span></span><br><span class="line"><span class="comment">     * 如果返回 false，则这些注解未声明并且可能要求后续 Processor 处理它们</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(annotations)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Found Sima field, start... &lt;&lt;&lt;"</span>);</span><br><span class="line">                <span class="comment">// 获取所有被注解了@Sima的元素列表，并进行筛选分类</span></span><br><span class="line">                categories(roundEnv.getElementsAnnotatedWith(Sima.<span class="keyword">class</span>));</span><br><span class="line">                generateHelper();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                logger.error(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成java代码帮助方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> void generateHelper() &#123;</span><br><span class="line">        <span class="comment">// 模版类接口</span></span><br><span class="line">        TypeElement type_ISyringe = elementUtils.getTypeElement(Consts.ISYRINGE);</span><br><span class="line">        TypeElement type_JsonService = elementUtils.getTypeElement(Consts.JSON_SERVICE);</span><br><span class="line">        TypeMirror iProvider = elementUtils.getTypeElement(Consts.IPROVIDER).asType();</span><br><span class="line">        TypeMirror activityTm = elementUtils.getTypeElement(Consts.ACTIVITY).asType();</span><br><span class="line">        TypeMirror fragmentTm = elementUtils.getTypeElement(Consts.FRAGMENT).asType();</span><br><span class="line">        TypeMirror fragmentTmV4 = elementUtils.getTypeElement(Consts.FRAGMENT_V4).asType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建Object类型的公共参数target</span></span><br><span class="line">        ParameterSpec objectParamSpec = ParameterSpec.builder(TypeName.OBJECT, <span class="string">"target"</span>).build();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isNotEmpty(parentAndChild)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;TypeElement, List&lt;Element&gt;&gt; entry : parentAndChild.entrySet()) &#123;</span><br><span class="line">                <span class="comment">// 构建inject方法</span></span><br><span class="line">                MethodSpec.Builder injectMethodBuilder = MethodSpec.methodBuilder(Consts.METHOD_INJECT)</span><br><span class="line">                        .addAnnotation(Override.<span class="keyword">class</span>)</span><br><span class="line">                        .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                        .addParameter(objectParamSpec);</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                TypeElement parent = entry.getKey();</span><br><span class="line">                List&lt;Element&gt; childs = entry.getValue();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 返回此类型元素的完全限定名称。更准确地说，返回规范 名称。</span></span><br><span class="line">                <span class="comment">// 对于没有规范名称的局部类和匿名类，返回一个空名称。此处拿到的是全类名。</span></span><br><span class="line">                String qualifiedName = parent.getQualifiedName().toString();</span><br><span class="line">                String packageName = qualifiedName.substring(<span class="number">0</span>, qualifiedName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">                String fileName = parent.getSimpleName() + Consts.NAME_OF_SIMA;</span><br><span class="line">                <span class="comment">// logger.info("&gt;&gt;&gt; qualifiedName " + qualifiedName + " packageName " + packageName + " fileName " + fileName + " ... &lt;&lt;&lt;");</span></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Start process "</span> + childs.size() + <span class="string">" field in "</span> + parent.getSimpleName() + <span class="string">" ... &lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 构建类</span></span><br><span class="line">                TypeSpec.Builder helper = TypeSpec.classBuilder(fileName)</span><br><span class="line">                        .addJavadoc(Consts.WARNING_TIPS)</span><br><span class="line">                        .addSuperinterface(ClassName.<span class="keyword">get</span>(type_ISyringe))</span><br><span class="line">                        .addModifiers(Modifier.PUBLIC);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 构建字段</span></span><br><span class="line">                FieldSpec jsonServiceField = FieldSpec.builder(TypeName.<span class="keyword">get</span>(type_JsonService.asType()), <span class="string">"serializationService"</span>, Modifier.PRIVATE).build();</span><br><span class="line">                helper.addField(jsonServiceField);</span><br><span class="line"></span><br><span class="line">                injectMethodBuilder.addStatement(<span class="string">"serializationService = <span class="variable">$T</span>.getInstance().navigation(<span class="variable">$T</span>.class)"</span>, SimClass, ClassName.<span class="keyword">get</span>(type_JsonService));</span><br><span class="line">                injectMethodBuilder.addStatement(<span class="string">"<span class="variable">$T</span> substitute = (<span class="variable">$T</span>)target"</span>, ClassName.<span class="keyword">get</span>(parent), ClassName.<span class="keyword">get</span>(parent));</span><br><span class="line">                <span class="comment">// 在inject方法中构建方法体</span></span><br><span class="line">                <span class="keyword">for</span> (Element element : childs) &#123;</span><br><span class="line">                    Sima fieldConfig = element.getAnnotation(Sima.<span class="keyword">class</span>);</span><br><span class="line">                    String fieldName = element.getSimpleName().toString();</span><br><span class="line">                    <span class="keyword">if</span> (types.isSubtype(element.asType(), iProvider)) &#123;  <span class="comment">// It's provider</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// It's normal intent value</span></span><br><span class="line">                        String originalValue = <span class="string">"substitute."</span> + fieldName;</span><br><span class="line">                        String statement = <span class="string">"substitute."</span> + fieldName + <span class="string">" = "</span> + buildCastCode(element) + <span class="string">"substitute."</span>;</span><br><span class="line">                        boolean isActivity = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (types.isSubtype(parent.asType(), activityTm)) &#123;  <span class="comment">// Activity, then use getIntent()</span></span><br><span class="line">                            isActivity = <span class="literal">true</span>;</span><br><span class="line">                            statement += <span class="string">"getIntent()."</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(parent.asType(), fragmentTm) || types.isSubtype(parent.asType(), fragmentTmV4)) &#123;   <span class="comment">// Fragment, then use getArguments()</span></span><br><span class="line">                            statement += <span class="string">"getArguments()."</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">throw</span> new IllegalAccessException(<span class="string">"The field ["</span> + fieldName + <span class="string">"] need autowired from intent, its parent must be activity or fragment!"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        statement = buildStatement(originalValue, statement, typeUtils.typeExchange(element), isActivity);</span><br><span class="line">                        <span class="keyword">if</span> (statement.startsWith(<span class="string">"serializationService."</span>)) &#123;   <span class="comment">// Not mortals</span></span><br><span class="line">                            injectMethodBuilder.beginControlFlow(<span class="string">"if (null != serializationService)"</span>);</span><br><span class="line">                            injectMethodBuilder.addStatement(</span><br><span class="line">                                    <span class="string">"substitute."</span> + fieldName + <span class="string">" = "</span> + statement,</span><br><span class="line">                                    (StringUtils.isEmpty(fieldConfig.name()) ? fieldName : fieldConfig.name()),</span><br><span class="line">                                    ClassName.<span class="keyword">get</span>(element.asType())</span><br><span class="line">                            );</span><br><span class="line">                            injectMethodBuilder.nextControlFlow(<span class="string">"else"</span>);</span><br><span class="line">                            injectMethodBuilder.addStatement(</span><br><span class="line">                                    <span class="string">"<span class="variable">$T</span>.e(\""</span> + Consts.TAG + <span class="string">"\", \"You want automatic inject the field '"</span> + fieldName + <span class="string">"' in class '<span class="variable">$T</span>' , then you should implement 'SerializationService' to support object auto inject!\")"</span>, AndroidLog, ClassName.<span class="keyword">get</span>(parent));</span><br><span class="line">                            injectMethodBuilder.endControlFlow();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            injectMethodBuilder.addStatement(statement, StringUtils.isEmpty(fieldConfig.name()) ? fieldName : fieldConfig.name());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                helper.addMethod(injectMethodBuilder.build());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Generate autowire helper</span></span><br><span class="line">                JavaFile.builder(packageName, helper.build()).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; "</span> + parent.getSimpleName() + <span class="string">" has been processed, "</span> + fileName + <span class="string">" has been generated. &lt;&lt;&lt;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; Sima processor stop. &lt;&lt;&lt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String buildStatement(String originalValue, String statement, int type, boolean isActivity) &#123;</span><br><span class="line">        switch (TypeKind.values()[type]) &#123;</span><br><span class="line">            case BOOLEAN:</span><br><span class="line">                statement += (isActivity ? (<span class="string">"getBooleanExtra(<span class="variable">$S</span>, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getBoolean(<span class="variable">$S</span>)"</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case BYTE:</span><br><span class="line">                statement += (isActivity ? (<span class="string">"getByteExtra(<span class="variable">$S</span>, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getByte(<span class="variable">$S</span>)"</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case SHORT:</span><br><span class="line">                statement += (isActivity ? (<span class="string">"getShortExtra(<span class="variable">$S</span>, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getShort(<span class="variable">$S</span>)"</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case INT:</span><br><span class="line">                statement += (isActivity ? (<span class="string">"getIntExtra(<span class="variable">$S</span>, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getInt(<span class="variable">$S</span>)"</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case LONG:</span><br><span class="line">                statement += (isActivity ? (<span class="string">"getLongExtra(<span class="variable">$S</span>, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getLong(<span class="variable">$S</span>)"</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case CHAR:</span><br><span class="line">                statement += (isActivity ? (<span class="string">"getCharExtra(<span class="variable">$S</span>, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getChar(<span class="variable">$S</span>)"</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case FLOAT:</span><br><span class="line">                statement += (isActivity ? (<span class="string">"getFloatExtra(<span class="variable">$S</span>, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getFloat(<span class="variable">$S</span>)"</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case DOUBLE:</span><br><span class="line">                statement += (isActivity ? (<span class="string">"getDoubleExtra(<span class="variable">$S</span>, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getDouble(<span class="variable">$S</span>)"</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case STRING:</span><br><span class="line">                statement += (isActivity ? (<span class="string">"getExtras() == null ? "</span> + originalValue + <span class="string">" : substitute.getIntent().getExtras().getString(<span class="variable">$S</span>, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getString(<span class="variable">$S</span>)"</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case SERIALIZABLE:</span><br><span class="line">                statement += (isActivity ? (<span class="string">"getSerializableExtra(<span class="variable">$S</span>)"</span>) : (<span class="string">"getSerializable(<span class="variable">$S</span>)"</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case PARCELABLE:</span><br><span class="line">                statement += (isActivity ? (<span class="string">"getParcelableExtra(<span class="variable">$S</span>)"</span>) : (<span class="string">"getParcelable(<span class="variable">$S</span>)"</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case OBJECT:</span><br><span class="line">                statement = <span class="string">"serializationService.parseObject(substitute."</span> + (isActivity ? <span class="string">"getIntent()."</span> : <span class="string">"getArguments()."</span>) + (isActivity ? <span class="string">"getStringExtra(<span class="variable">$S</span>)"</span> : <span class="string">"getString(<span class="variable">$S</span>)"</span>) + <span class="string">", new "</span> + Consts.TYPE_WRAPPER + <span class="string">"&lt;<span class="variable">$T</span>&gt;()&#123;&#125;.getType())"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> statement;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String buildCastCode(Element element) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeUtils.typeExchange(element) == TypeKind.SERIALIZABLE.ordinal()) &#123;</span><br><span class="line">            <span class="keyword">return</span> CodeBlock.builder().add(<span class="string">"(<span class="variable">$T</span>) "</span>, ClassName.<span class="keyword">get</span>(element.asType())).build().toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父元素类型，进行元素字段筛选分类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> elements 有注解的元素集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> void categories(Set&lt;? extends Element&gt; elements) throws IllegalAccessException &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(elements)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">                <span class="comment">// 返回封装此元素的最里层元素，如果此元素的声明在词法上直接封装在另一个元素的声明中，则返回那个封装元素；</span></span><br><span class="line">                <span class="comment">// 如果此元素是顶层类型，则返回它的包如果此元素是一个包，则返回 null； 如果此元素是一个泛型参数，则返回 null.</span></span><br><span class="line">                TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 检查被注解的元素是否被私有化</span></span><br><span class="line">                <span class="keyword">if</span> (element.getModifiers().contains(Modifier.PRIVATE)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> new IllegalAccessException(<span class="string">"The inject fields CAN NOT BE 'private'!!! please check field ["</span></span><br><span class="line">                            + element.getSimpleName() + <span class="string">"] in class ["</span> + enclosingElement.getQualifiedName() + <span class="string">"]"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (parentAndChild.containsKey(enclosingElement)) &#123; <span class="comment">// Has categries</span></span><br><span class="line">                    parentAndChild.<span class="keyword">get</span>(enclosingElement).add(element);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    List&lt;Element&gt; childs = new ArrayList&lt;&gt;();</span><br><span class="line">                    childs.add(element);</span><br><span class="line">                    parentAndChild.put(enclosingElement, childs);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">"categories finished."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在Android应用中引用注解</li></ol><ul><li><p>首先在应用级别的<code>build.gradle</code>中添加依赖</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">annotationProcessor</span> <span class="selector-tag">project</span>(<span class="attribute">path</span>: <span class="string">':sim-compiler'</span>)</span><br><span class="line"><span class="selector-tag">implementation</span> <span class="selector-tag">project</span>(<span class="attribute">path</span>: <span class="string">':sim-annotation'</span>)</span><br></pre></td></tr></table></figure></li><li><p>然后可在Acitivty中的字段上添加<code>@Sima</code>注解</p></li></ul><p>运行代码后可在Build Output中查看注解相关类中打印的log<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注: Sim::Compiler The<span class="built_in"> user </span>has configuration the module name, it was [app]</span><br><span class="line">注: Sim::Compiler &gt;&gt;&gt; SimaProcessor init. &lt;&lt;&lt;</span><br><span class="line">注: Sim::Compiler &gt;&gt;&gt; Found Sima field, start<span class="built_in">..</span>. &lt;&lt;&lt;</span><br><span class="line">注: Sim::Compiler categories finished.</span><br><span class="line">注: Sim::Compiler &gt;&gt;&gt; Start process 1 field <span class="keyword">in</span> MainActivity <span class="built_in">..</span>. &lt;&lt;&lt;</span><br></pre></td></tr></table></figure></p><p><strong>注：<a href="https://github.com/square/javapoet" target="_blank" rel="noopener">javapoet</a>是用来生成java代码</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;按照处理时期，注解分为两种类型，一种是运行时注解，另一种是编译时注解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;编译时注解的核心依赖APT(Annotation Processing Tools)实现，对应的处理流程为：
      
    
    </summary>
    
      <category term="Android" scheme="http://www.code4a.com/categories/Android/"/>
    
    
      <category term="Annomation" scheme="http://www.code4a.com/tags/Annomation/"/>
    
  </entry>
  
  <entry>
    <title>Modbus通信协议功能码</title>
    <link href="http://www.code4a.com/2018/07/18/modbus-function-code/"/>
    <id>http://www.code4a.com/2018/07/18/modbus-function-code/</id>
    <published>2018-07-18T01:25:24.000Z</published>
    <updated>2018-07-18T01:55:50.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Modbus功能代码对应名称及作用"><a href="#Modbus功能代码对应名称及作用" class="headerlink" title="Modbus功能代码对应名称及作用"></a>Modbus功能代码对应名称及作用</h2><table><thead><tr><th>功能码</th><th>名称</th><th>作用</th></tr></thead><tbody><tr><td> 1</td><td>读取线圈状态</td><td>取得一组逻辑线圈的当前状态（ON/OFF)</td></tr><tr><td> 2</td><td>读取输入状态</td><td>取得一组开关输入的当前状态（ON/OFF)</td></tr><tr><td> 3</td><td>读取保持寄存器</td><td>在一个或多个保持寄存器中取得当前的二进制值</td></tr><tr><td> 4</td><td>读取输入寄存器</td><td>在一个或多个输入寄存器中取得当前的二进制值</td></tr><tr><td> 5</td><td>强置单线圈</td><td>强置一个逻辑线圈的通断状态</td></tr><tr><td> 6</td><td>预置单寄存器</td><td>把具体二进值装入一个保持寄存器</td></tr><tr><td> 7</td><td>读取异常状态</td><td>取得8个内部线圈的通断状态，这8个线圈的地址由控制器决定</td></tr><tr><td> 8</td><td>回送诊断校验</td><td>把诊断校验报文送从机，以对通信处理进行评鉴</td></tr><tr><td> 9</td><td>编程（只用于484）</td><td>使主机模拟编程器作用，修改PC从机逻辑</td></tr><tr><td> 10</td><td>控询（只用于484）</td><td>可使主机与一台正在执行长程序任务从机通信，探询该从机是否已完成其操作任务，仅在含有功能码9的报文发送后，本功能码才发送</td></tr><tr><td> 11</td><td>读取事件计数</td><td>可使主机发出单询问，并随即判定操作是否成功，尤其是该命令或其他应答产生通信错误时</td></tr><tr><td> 12</td><td>读取通信事件记录</td><td>可使主机检索每台从机的ModBus事务处理通信事件记录。如果某项事务处理完成，记录会给出有关错误</td></tr><tr><td> 13</td><td>编程 (184/384 484 584)</td><td>可使主机模拟编程器功能修改PC从机逻辑</td></tr><tr><td> 14</td><td>探询 (184/384 484 584)</td><td>可使主机与正在执行任务的从机通信，定期控询该从机是否已完成其程序操作，仅在含有功能13的报文发送后，本功能码才得发送</td></tr><tr><td> 15</td><td>强置多线圈</td><td>强置一串连续逻辑线圈的通断</td></tr><tr><td> 16</td><td>预置多寄存器</td><td>把具体的二进制值装入一串连续的保持寄存器</td></tr><tr><td> 17</td><td>报告从机标识</td><td>可使主机判断编址从机的类型及该从机运行指示灯的状态</td></tr><tr><td> 18</td><td>(884和MICRO 84)</td><td>可使主机模拟编程功能，修改PC状态逻辑</td></tr><tr><td> 19</td><td>重置通信链路</td><td>发生非可修改错误后，使从机复位于已知状态，可重置顺序字节</td></tr><tr><td> 20</td><td>读取通用参数(584L)</td><td>读取拓展存储器文件中的数据信息</td></tr><tr><td> 21</td><td>写入通用参数(584L)</td><td>把通用参数写入扩展存储文件，或修改</td></tr></tbody></table><hr><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://www.dgzj.com/plc/86421.html" target="_blank" rel="noopener">Modbus通信协议功能码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Modbus功能代码对应名称及作用&quot;&gt;&lt;a href=&quot;#Modbus功能代码对应名称及作用&quot; class=&quot;headerlink&quot; title=&quot;Modbus功能代码对应名称及作用&quot;&gt;&lt;/a&gt;Modbus功能代码对应名称及作用&lt;/h2&gt;&lt;table&gt;
&lt;thea
      
    
    </summary>
    
      <category term="Modbus" scheme="http://www.code4a.com/categories/Modbus/"/>
    
    
      <category term="Modbus" scheme="http://www.code4a.com/tags/Modbus/"/>
    
  </entry>
  
  <entry>
    <title>Mac下git多用户管理配置</title>
    <link href="http://www.code4a.com/2018/06/05/Mac%E4%B8%8Bgit%E5%A4%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.code4a.com/2018/06/05/Mac下git多用户管理配置/</id>
    <published>2018-06-05T01:20:47.000Z</published>
    <updated>2018-06-09T02:56:21.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac下git多用户管理配置，并且配置Android-Studio正确引用"><a href="#Mac下git多用户管理配置，并且配置Android-Studio正确引用" class="headerlink" title="Mac下git多用户管理配置，并且配置Android Studio正确引用"></a>Mac下git多用户管理配置，并且配置Android Studio正确引用</h2><h3 id="git全局账户邮箱清理，如果没有配置可以忽略这一步"><a href="#git全局账户邮箱清理，如果没有配置可以忽略这一步" class="headerlink" title="git全局账户邮箱清理，如果没有配置可以忽略这一步"></a>git全局账户邮箱清理，如果没有配置可以忽略这一步</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global --unset user.name <span class="string">"username"</span></span><br><span class="line">git<span class="built_in"> config </span>--global --unset user.email <span class="string">"email address"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.name</span><br><span class="line"><span class="comment">#全局配置账户已经移除</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email</span><br><span class="line"><span class="comment">#全局配置邮箱已经移除</span></span><br></pre></td></tr></table></figure><h3 id="进入对应的代码仓库配置对应的用户名和邮箱"><a href="#进入对应的代码仓库配置对应的用户名和邮箱" class="headerlink" title="进入对应的代码仓库配置对应的用户名和邮箱"></a>进入对应的代码仓库配置对应的用户名和邮箱</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// github 配置</span></span><br><span class="line">cd github-repository/</span><br><span class="line">git config user<span class="selector-class">.name</span> githubAccount</span><br><span class="line">git config user<span class="selector-class">.email</span> githubEmail</span><br><span class="line"><span class="comment">// 修改后查看配置</span></span><br><span class="line">git config user.name</span><br><span class="line">#githubAccount</span><br><span class="line">git config user.email</span><br><span class="line">#githubEmail</span><br><span class="line"></span><br><span class="line"><span class="comment">// gitlab 配置同上</span></span><br></pre></td></tr></table></figure><h3 id="生成邮箱对应的公钥和私钥"><a href="#生成邮箱对应的公钥和私钥" class="headerlink" title="生成邮箱对应的公钥和私钥"></a>生成邮箱对应的公钥和私钥</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成github对应的公钥和私钥</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"github对应的邮箱"</span></span><br><span class="line">Enter <span class="keyword">file</span> <span class="keyword">in</span> <span class="keyword">which</span> to <span class="keyword">save</span> the key (/Users/Accout(你的用户名)/.ssh/id_rsa): id_rsa_github</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成gitlab对应的公钥和私钥</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"gitlab对应的邮箱"</span></span><br><span class="line">Enter <span class="keyword">file</span> <span class="keyword">in</span> <span class="keyword">which</span> to <span class="keyword">save</span> the key (/Users/Accout(你的用户名)/.ssh/id_rsa): id_rsa_gitlab</span><br></pre></td></tr></table></figure><h3 id="拷贝对应的公钥内容到对应平台的ssh-key"><a href="#拷贝对应的公钥内容到对应平台的ssh-key" class="headerlink" title="拷贝对应的公钥内容到对应平台的ssh key"></a>拷贝对应的公钥内容到对应平台的ssh key</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// github ssh key 配置</span></span><br><span class="line">cat .ssh/id_rsa_github.pub <span class="comment">// 复制内容</span></span><br><span class="line"><span class="function"><span class="title">settings</span> -&gt;</span> SSH <span class="function"><span class="title">and</span> GPG keys -&gt;</span> New SSH key</span><br><span class="line"></span><br><span class="line"><span class="comment">// gitlab ssh key 配置</span></span><br><span class="line">cat .ssh/id_rsa_gitlab.pub <span class="comment">// 复制内容</span></span><br><span class="line"><span class="function"><span class="title">profile</span> settings -&gt;</span> SSH <span class="function"><span class="title">keys</span> -&gt;</span> Add SSH Key</span><br></pre></td></tr></table></figure><h3 id="在-ssh根目录创建cinfig文件，添加内容"><a href="#在-ssh根目录创建cinfig文件，添加内容" class="headerlink" title="在.ssh根目录创建cinfig文件，添加内容"></a>在.ssh根目录创建cinfig文件，添加内容</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd .ssh</span><br><span class="line">vim config</span><br><span class="line"><span class="comment"># github email address</span></span><br><span class="line">Host github</span><br><span class="line">HostName github.com</span><br><span class="line"><span class="keyword">User</span> <span class="title">git</span> // 尝试只有用户名为git时才能测试通过</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitlab email address</span></span><br><span class="line">Host gitlab</span><br><span class="line">HostName git.corp.company.cn // 你公司的gitlab地址</span><br><span class="line"><span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure><h3 id="ssh-add-K-私钥名"><a href="#ssh-add-K-私钥名" class="headerlink" title="ssh-add -K 私钥名"></a>ssh-add -K 私钥名</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-<span class="keyword">add</span><span class="bash"> -D // 删除所有密钥，请根据自己的情况执行命令</span></span><br><span class="line"><span class="bash">ssh-add -K id_rsa_github //存储密钥到钥匙串</span></span><br><span class="line"><span class="bash">ssh-add -K id_rsa_gitlab</span></span><br><span class="line"><span class="bash">ssh-add -L // 查看所有公钥参数 -l 查看所有公钥指纹</span></span><br></pre></td></tr></table></figure><h3 id="解决Mac重启之后ssh-add失效的问题"><a href="#解决Mac重启之后ssh-add失效的问题" class="headerlink" title="解决Mac重启之后ssh-add失效的问题"></a>解决Mac重启之后ssh-add失效的问题</h3><p><strong><a href="http://mednoter.com/ssh-add-automatically.html" target="_blank" rel="noopener">Mac 重启后自动 ssh-add 私钥</a></strong><br><br><strong><a href="https://www.jianshu.com/p/20547b778bb1" target="_blank" rel="noopener">Mac OS Sierra SSH密钥在重启后丢失的问题</a></strong></p><h4 id="如果还是没有解决该问题，可以自己编写shell脚本，添加到开机启动项当中"><a href="#如果还是没有解决该问题，可以自己编写shell脚本，添加到开机启动项当中" class="headerlink" title="如果还是没有解决该问题，可以自己编写shell脚本，添加到开机启动项当中"></a>如果还是没有解决该问题，可以自己编写shell脚本，添加到开机启动项当中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim .ssh/add_key.sh</span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># 添加github 公钥</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa_github</span><br><span class="line"><span class="comment"># 添加gitlab 公钥</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa_gitlab</span><br><span class="line"></span><br><span class="line">// 保存退出后，赋予sh文件可运行权限</span><br><span class="line">chmod +x .ssh/add_key.sh</span><br></pre></td></tr></table></figure><p>选择sh打开方式为命令行工具(iTerm/终端)添加sh文件到开机启动项 <code>系统偏好设置&gt;用户与群组&gt;登录项&gt;+</code> 如果需要可勾选隐藏项</p><h3 id="ssh-vT-git-域名-检测"><a href="#ssh-vT-git-域名-检测" class="headerlink" title="ssh -vT git@域名 检测"></a>ssh -vT git@域名 检测</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试github是否配置成功</span></span><br><span class="line">ssh -T github <span class="comment">// github 是 Host 的值，此处可以替换为自己的</span></span><br><span class="line">Hi username! You've successfully authenticated, but GitHub does <span class="keyword">not</span> provide <span class="built_in">shell</span> access.</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试gitlab是否配置成功</span></span><br><span class="line">ssh -T gitlab <span class="comment">// 同上</span></span><br><span class="line">Welcome to GitLab, username!</span><br></pre></td></tr></table></figure><p><strong>以上如果不通的话，可以通过ssh -vT Host查看log信息</strong></p><h3 id="as中配置git-选择相同版本，-ssh选择native"><a href="#as中配置git-选择相同版本，-ssh选择native" class="headerlink" title="as中配置git 选择相同版本， ssh选择native"></a>as中配置git 选择相同版本， ssh选择native</h3><ul><li>此处如果使用android studio的话需要在设置中进行指定使用的git版本和git配置，因为android stuido会读取自己的配置信息</li><li>修改android stuido的配置</li></ul><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改路径</span></span><br><span class="line">P<span class="function"><span class="title">references</span> -&gt;</span> V<span class="function"><span class="title">ersion</span> Control -&gt;</span> Git </span><br><span class="line"><span class="comment">// 匹配Path to Git executable路径和你命令行的git路径一致</span></span><br><span class="line"><span class="comment">// 修改SSH executable 为Native</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mac下git多用户管理配置，并且配置Android-Studio正确引用&quot;&gt;&lt;a href=&quot;#Mac下git多用户管理配置，并且配置Android-Studio正确引用&quot; class=&quot;headerlink&quot; title=&quot;Mac下git多用户管理配置，并且配
      
    
    </summary>
    
      <category term="tools" scheme="http://www.code4a.com/categories/tools/"/>
    
    
      <category term="Tools" scheme="http://www.code4a.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>React Native 问题记录</title>
    <link href="http://www.code4a.com/2018/04/18/react-native-record/"/>
    <id>http://www.code4a.com/2018/04/18/react-native-record/</id>
    <published>2018-04-18T01:59:05.000Z</published>
    <updated>2018-04-18T02:45:40.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Native开发笔记"><a href="#React-Native开发笔记" class="headerlink" title="React Native开发笔记"></a>React Native开发笔记</h2><blockquote><p>详细的环境配置和文档说明请查看 <strong><a href="https://reactnative.cn/docs/0.51/getting-started.html" target="_blank" rel="noopener">React Native中文文档</a></strong></p></blockquote><h3 id="命令行连接设备"><a href="#命令行连接设备" class="headerlink" title="命令行连接设备"></a>命令行连接设备</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb devices <span class="comment">// 查看当前是否连接设备且只能有一个设备</span></span><br><span class="line">adb reverse <span class="string">tcp:</span><span class="number">8081</span> <span class="string">tcp:</span><span class="number">8081</span></span><br></pre></td></tr></table></figure><h3 id="测试安装项目"><a href="#测试安装项目" class="headerlink" title="测试安装项目"></a>测试安装项目</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">react-<span class="keyword">native</span> init ProjectName</span><br><span class="line">cd ProjectName</span><br><span class="line">react-<span class="keyword">native</span> run-android <span class="comment">// 如果是ios 请用react-native  run-ios</span></span><br></pre></td></tr></table></figure><h3 id="文档中的电影示例存在的问题"><a href="#文档中的电影示例存在的问题" class="headerlink" title="文档中的电影示例存在的问题"></a>文档中的电影示例存在的问题</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: <span class="string">'undefined'</span> <span class="keyword">is</span> <span class="keyword">not</span> an <span class="keyword">object</span> (evaluating <span class="string">'movie.posters.thumbnail'</span>)</span><br></pre></td></tr></table></figure><p><strong>问题待分析</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-Native开发笔记&quot;&gt;&lt;a href=&quot;#React-Native开发笔记&quot; class=&quot;headerlink&quot; title=&quot;React Native开发笔记&quot;&gt;&lt;/a&gt;React Native开发笔记&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;详
      
    
    </summary>
    
      <category term="React Native" scheme="http://www.code4a.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://www.code4a.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>mac环境下使用nvm管理node版本</title>
    <link href="http://www.code4a.com/2018/03/14/node-npm-update/"/>
    <id>http://www.code4a.com/2018/03/14/node-npm-update/</id>
    <published>2018-03-14T01:55:58.000Z</published>
    <updated>2018-03-14T09:41:08.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac环境下安装node时遇到的问题汇总"><a href="#Mac环境下安装node时遇到的问题汇总" class="headerlink" title="Mac环境下安装node时遇到的问题汇总"></a>Mac环境下安装node时遇到的问题汇总</h2><h5 id="通过brew安装nvm成功后，在zsh命令行输入nvm提示命令找不到"><a href="#通过brew安装nvm成功后，在zsh命令行输入nvm提示命令找不到" class="headerlink" title="通过brew安装nvm成功后，在zsh命令行输入nvm提示命令找不到"></a>通过<code>brew</code>安装<code>nvm</code>成功后，在<code>zsh</code>命令行输入<code>nvm</code>提示命令找不到</h5><blockquote><p>此时需要添加如下配置到<code>.zshrc</code></p></blockquote>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">NVM_DIR</span>=<span class="string">"/Users/username/.nvm"</span></span><br><span class="line">source $(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></table></figure><p> <strong>注意</strong>：在安装完成<code>nvm</code>后命令行自动提示的追加内容，会导致<code>nvm</code>安装<code>nodejs</code>后不生效的问题，此问题时<code>zsh</code>的一个bug</p><h5 id="通过命令nvm-install-nodeversion-安装完成之后，需要通过如下命令使用"><a href="#通过命令nvm-install-nodeversion-安装完成之后，需要通过如下命令使用" class="headerlink" title="通过命令nvm install (nodeversion)安装完成之后，需要通过如下命令使用"></a>通过命令<code>nvm install (nodeversion)</code>安装完成之后，需要通过如下命令使用</h5>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm use (version)</span><br><span class="line">nvm alias<span class="built_in"> default </span>(version)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mac环境下安装node时遇到的问题汇总&quot;&gt;&lt;a href=&quot;#Mac环境下安装node时遇到的问题汇总&quot; class=&quot;headerlink&quot; title=&quot;Mac环境下安装node时遇到的问题汇总&quot;&gt;&lt;/a&gt;Mac环境下安装node时遇到的问题汇总&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Tools" scheme="http://www.code4a.com/categories/Tools/"/>
    
    
      <category term="tools" scheme="http://www.code4a.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>百度DuerOS Android平台接入流程</title>
    <link href="http://www.code4a.com/2018/01/31/dueros-android-import/"/>
    <id>http://www.code4a.com/2018/01/31/dueros-android-import/</id>
    <published>2018-01-31T09:00:23.000Z</published>
    <updated>2018-02-01T12:02:43.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="百度DuerOS接入让App更加智能"><a href="#百度DuerOS接入让App更加智能" class="headerlink" title="百度DuerOS接入让App更加智能"></a>百度DuerOS接入让App更加智能</h2><blockquote><p>DuerOS开放平台是为企业及开发者提供的一整套对话式人工智能解决方案的开放平台</p></blockquote><h4 id="百度DuerOS开发平台官网地址"><a href="#百度DuerOS开发平台官网地址" class="headerlink" title="百度DuerOS开发平台官网地址"></a>百度DuerOS开发平台<a href="http://open.duer.baidu.com/open" target="_blank" rel="noopener">官网地址</a></h4><blockquote><p>平台分为<a href="https://dueros.baidu.com/dbp" target="_blank" rel="noopener">技能开放平台</a>和<a href="http://open.duer.baidu.com/didp/main/index" target="_blank" rel="noopener">智能设备开放平台</a>具体的功能区别以及应用场景可查看网站介绍</p></blockquote><h3 id="注册成为开发者"><a href="#注册成为开发者" class="headerlink" title="注册成为开发者"></a>注册成为开发者</h3><ol><li>如何你有百度账号，则使用百度账号进行<a href="https://passport.baidu.com/v2/?login&amp;u=https%3A%2F%2Fdueros.baidu.com%2Fdidp%2Fmain%2Findex" target="_blank" rel="noopener">登录</a>，如何没有账号，则需要先<a href="https://passport.baidu.com/v2/?reg&amp;tt=1517389947286&amp;overseas=&amp;gid=A8F49B7-66FC-4337-955E-DC518691EF04&amp;tpl=pp&amp;u=https%3A%2F%2Fdueros.baidu.com%2Fdidp%2Fmain%2Findex" target="_blank" rel="noopener">注册</a>百度账号</li><li><a href="https://dueros.baidu.com/didp/register/registerinfo" target="_blank" rel="noopener">进行开发者认证</a>开发者认证分为个人和企业开发者，需要的材料按照网页所需提供，审核材料需要经过两个工作日，审核通过就可以管理技能和设备两个控制台。</li></ol><h3 id="技能平台"><a href="#技能平台" class="headerlink" title="技能平台"></a>技能平台</h3><ol><li>创建新技能</li></ol><blockquote><p>技能平台，包含自定义技能，智能家居技能，内容播报技能</p></blockquote><p><img src="https://raw.githubusercontent.com/code4a/code4a.github.io/master/bimg/dueros-android-import-skill1.png" alt="dueros-android-import-skill1.png"></p><ol><li>管理技能</li></ol><blockquote><p>可以在自己创建的技能上进行编辑/删除/查看技能ID</p></blockquote><ul><li>编辑技能</li></ul><blockquote><p>编辑技能页面可以查看技能的基础信息/交互模型/配置服务/模拟测试/发布上线/版本管理/技能数据功能，其中交互模型需要自己创建意图，定义字典，还可对其进行训练。</p></blockquote><p>交互模型的使用可以查看官方教程进行学习<a href="http://duer.bdstatic.com/saiya/flow/dbp-dst-multidialogue.mp4" target="_blank" rel="noopener">DST多轮对话</a></p><h3 id="设备平台-以下以Android设备为例"><a href="#设备平台-以下以Android设备为例" class="headerlink" title="设备平台(以下以Android设备为例)"></a>设备平台(以下以Android设备为例)</h3><ol><li>配置新设备<ol><li>场景选择为<strong>手机</strong>点击下一步</li><li>操作系统选择为<strong>Android</strong>点击下一步</li><li>此时需要填写设备名称，点击申请<strong>ClientID</strong>，用于后续SDK接入鉴权使用。</li><li>端能力配置，可用于屏幕展示，语音输入输出的配置。点击下一步</li><li>云服务配置，可分为BOT配置，聊天人物肖像的配置，可以将语音机器人进行丰富。语音唤醒服务，自定义控制命令，此时需要提供三个dic文件，用于自定义命令的识别和识别后云平台指令的下发。</li><li><strong><a href="https://github.com/dueros/dcs-sdk-java" target="_blank" rel="noopener">SDK下载</a></strong></li></ol></li><li><p>SDK接入</p><p> SDK的配置可以参考<a href="https://github.com/dueros/dcs-sdk-java/blob/master/README.md" target="_blank" rel="noopener">DCS SDK（Java）开发者指南</a></p></li><li><p>接入SDK添加自定义功能。</p><ol><li><p>首先配置自己设备的云服务自定义控制命令，上传三个dic文件(intent.dic/dict.dic/command.dic)进行审核，需要五个工作日左右。</p><p>intent.dic意图文件将用户的语音命令上传到云平台之后拆分进行意图匹配下发命令</p><p> ai.dueros.device_interface.thirdparty.cmcc.smart_gateway Add [D:add][device][type][W:0-2]<br> ai.dueros.device_interface.thirdparty.cmcc.smart_gateway Remove [D:remove][device][type][W:0-2]<br> ai.dueros.device_interface.thirdparty.cmcc.smart_gateway Bind [D:bind][gateway][W:0-2]<br> ai.dueros.device_interface.thirdparty.cmcc.smart_gateway UnBind [D:unbind][gateway][W:0-2]</p><p>dict.dic词典文件将平台上用户的语音进行分解，解析出用户想要做出的指令</p><p> [D:add]<br> 添加<br> 增加<br> [D:remove]<br> 删除<br> 移除<br> [D:bind]<br> 绑定<br> [D:unbind]<br> 解绑<br> [D:device]<br> 温湿度<br> 水浸<br> 红外人感<br> 门磁<br> 燃气<br> 可燃气体<br> 烟雾感应<br> 声光<br> [D:gateway]<br> 普通网关<br> [D:type]<br> 传感器<br> 感应器</p><p>command.dic用户语言库，用来存储用户可能想要说出的完成控制命令语句</p><p> 添加烟雾感应感应器</p></li><li><p>修改SDK添加自定义的DeviceModule</p><p> <img src="https://raw.githubusercontent.com/code4a/code4a.github.io/master/bimg/dueros-android-import-sdk-devicemodule.png" alt="dueros-android-import-sdk-devicemodule.png"></p><ul><li><p>ApiConstants.java用来匹配自定义的控制命令意图，将用户的话拆分成控制关键词和命令语句</p><pre><code>public class ApiConstants {    public static final String NAMESPACE = &quot;ai.dueros.device_interface.thirdparty.cmcc.smart_gateway&quot;;    public static final String NAME = &quot;SmartGatewayInterface&quot;;    public static final class Events {    }    public static final class Directives {    public static final class Add {        public static final String NAME = Add.class.getSimpleName();    }    public static final class Remove {        public static final String NAME = Remove.class.getSimpleName();    }    public static final class Bind {        public static final String NAME = Bind.class.getSimpleName();    }    public static final class UnBind {        public static final String NAME = UnBind.class.getSimpleName();    }    }}</code></pre></li><li><p>*Payload.java用来接收用户的命令，这两个类需要在<code>framework.message</code>包下的<code>PayloadConfig.java</code>中进行插入，用来解析下发的<code>payload json</code>数据</p></li><li>SmartGatewayDeviceModule.java用来解析命令，并分发下去。</li><li>最后在<code>framework</code>包下的<code>DeviceModuleFactory.java</code>中创建添加我们的Module即可。</li></ul></li></ol></li></ol><h3 id="具体示例可以查看百度Dueros平台Demo"><a href="#具体示例可以查看百度Dueros平台Demo" class="headerlink" title="具体示例可以查看百度Dueros平台Demo"></a>具体示例可以查看<a href="https://github.com/code4a/dcs-sdk-java-master" target="_blank" rel="noopener">百度Dueros平台Demo</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;百度DuerOS接入让App更加智能&quot;&gt;&lt;a href=&quot;#百度DuerOS接入让App更加智能&quot; class=&quot;headerlink&quot; title=&quot;百度DuerOS接入让App更加智能&quot;&gt;&lt;/a&gt;百度DuerOS接入让App更加智能&lt;/h2&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="android" scheme="http://www.code4a.com/categories/android/"/>
    
    
      <category term="Android" scheme="http://www.code4a.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>自建服务器证书</title>
    <link href="http://www.code4a.com/2017/12/26/creat-server-certificate/"/>
    <id>http://www.code4a.com/2017/12/26/creat-server-certificate/</id>
    <published>2017-12-26T08:41:22.000Z</published>
    <updated>2018-03-22T09:50:35.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生成CA根证书"><a href="#生成CA根证书" class="headerlink" title="生成CA根证书"></a>生成CA根证书</h2><h4 id="此处假设你已经安装好了openssl环境变量，如果没有可以百度一下如何配置。"><a href="#此处假设你已经安装好了openssl环境变量，如果没有可以百度一下如何配置。" class="headerlink" title="此处假设你已经安装好了openssl环境变量，如果没有可以百度一下如何配置。"></a>此处假设你已经安装好了openssl环境变量，如果没有可以百度一下如何配置。</h4><ol><li><p>创建key，通过如下命令生成跟证书<strong>cert_name.key</strong></p> <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -des3 -out /your_cert_dir/cert_name.<span class="type">key</span> <span class="number">2048</span> <span class="comment">//des3 是加密算法，你也可以选择你认为安全的算法</span></span><br></pre></td></tr></table></figure><p> <img src="https://raw.githubusercontent.com/code4a/code4a.github.io/master/bimg/create_root_cert.png" alt="命令行输入之后图示"><br> <br><br> <img src="https://raw.githubusercontent.com/code4a/code4a.github.io/master/bimg/create_root_cert_key1.png" alt="秘钥"><br> <br><br> <strong>私钥</strong> test_root 此时输入的秘钥需要记录，后续自签是需要使用</p></li><li><p>生成CA证书及根证书，并对其进行自签，使用如下命令生成自签证书<strong>crt_name.crt</strong></p> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -key /your_cert_dir/cert_name<span class="selector-class">.key</span> -out /yout_cert_dir/crt_name<span class="selector-class">.crt</span> -days <span class="number">36500</span> <span class="comment">//x509是一种加密标准，-out是指输出路径，-key是指定私钥，也就是上一步生成的那个，-days是指证书的有效期。</span></span><br></pre></td></tr></table></figure></li></ol><pre><code>* 此时输入前面的cert_name私钥 test_root* 输入country cn * 时区或者省份 beijing * 市 bj* 公司company chinamobile* 部门 terminal* commone name 可以指定自己的名字或者别称，但是不能用服务器的名字 code4a* email jiangyantaodev@163.com</code></pre><h2 id="生成服务端证书"><a href="#生成服务端证书" class="headerlink" title="生成服务端证书"></a>生成服务端证书</h2><ol><li><p>创建server端的私钥</p> <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -des3 -out /your_key_dir/test_server.<span class="type">key</span> <span class="number">2048</span></span><br></pre></td></tr></table></figure><p> <strong>私匙</strong> ser_test_root</p></li><li><p>创建server证书签名请求 (如果需要改ip，则需要从这一步开始设置)</p> <figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -<span class="keyword">new</span> -<span class="built_in">key</span> /your_key_dir/test_server.<span class="built_in">key</span> -out /your_key_dir/test_server.csr</span><br></pre></td></tr></table></figure><ul><li>输入私匙 ser_test_root</li><li>输入country cn </li><li>时区或者省份 beijing </li><li>市 bj</li><li>公司company chinamobile</li><li>部门 terminal</li><li><p><strong>注意：</strong>这里的common name,此处填写你的服务器的ip或者域名，例如localhost，也就是你要为哪台服务器做证书就指定那台机器。localhost<br>  <br>或者填写远程服务器ip，如：</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">211<span class="selector-class">.136</span><span class="selector-class">.90</span><span class="selector-class">.87</span></span><br><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.179</span></span><br><span class="line">211<span class="selector-class">.136</span><span class="selector-class">.90</span><span class="selector-class">.53</span></span><br></pre></td></tr></table></figure></li><li><p>email <a href="mailto:jiangyantaodev@163.com" target="_blank" rel="noopener">jiangyantaodev@163.com</a></p></li><li>the following extra attributes to be sent with your certificate request<br>a challenge password ：（挑战密码可以和私匙不一样）123456</li><li>optional company name 可选公司名 code4a</li></ul></li><li><p>root CA签署server证书 </p><ul><li><p>如果是第一次通过CA签署证书的话，执行如下命令把<strong>test_server.crt</strong> 通过自签证书<strong>crt_name.crt</strong> 的认证</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days <span class="number">36500</span> -<span class="keyword">in</span> /your_key_dir/test_server<span class="selector-class">.csr</span> -CA /your_key_dir/crt_name<span class="selector-class">.crt</span> -CAkey /your_cert_dir/cert_name<span class="selector-class">.key</span> -CAcreateserial -out /your_cert_dir/test_server.crt</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建server端的pkcs12文件 </p> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -<span class="keyword">in</span> /your_cert_dir/test_server<span class="selector-class">.crt</span> -inkey /your_key_dir/test_server<span class="selector-class">.key</span> -out /your_key_dir/test_server<span class="selector-class">.p12</span> -name <span class="number">0927</span>_code4a_caserver_100year</span><br></pre></td></tr></table></figure><p> <strong>注意：</strong>其中的-name 0927_code4a_caserver_100year，这个是指定keystore的别名，记下来，很重要哦（weblogic要用到）</p><ul><li>输入服务器端私匙 ser_test_root</li><li>输入扩展（导出）密码 123456</li><li>确认密码 123456</li></ul></li><li><p>转换pkcs12为JKS keystore文件 </p><ul><li><p>这个过程需要用到jetty.jar，下载相应jar后添加到classpath，然后执行如下命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java org<span class="selector-class">.mortbay</span><span class="selector-class">.util</span><span class="selector-class">.PKCS12Import</span> /your_key_dir/test_server<span class="selector-class">.p12</span> /your_key_dir/test_server.jks</span><br></pre></td></tr></table></figure></li><li><p>如果环境变量没有配置好，执行上面语句报错，可以执行本段代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="built_in">File</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.LineNumberReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.Certificate;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class MyPKCS12Import &#123;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) throws Exception &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//主要修改这里，改成自己刚才生成的.p12文件</span></span><br><span class="line">  <span class="built_in">File</span> fileIn = <span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">"/your_key_dir/test_server.p12"</span>);</span><br><span class="line">  <span class="comment">//主要修改这里，改成自己要输出的位置</span></span><br><span class="line">  <span class="built_in">File</span> fileOut = <span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">"/your_key_dir/test_server.jks"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">if</span> (!(fileIn.canRead())) &#123;</span><br><span class="line">   System.err.<span class="built_in">println</span>(<span class="string">"Unable to access input keystore: "</span></span><br><span class="line">     + fileIn.getPath());</span><br><span class="line">   System.exit(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">if</span> ((fileOut.<span class="built_in">exists</span>()) &amp;&amp; (!(fileOut.canWrite()))) &#123;</span><br><span class="line">   System.err.<span class="built_in">println</span>(<span class="string">"Output file is not writable: "</span></span><br><span class="line">     + fileOut.getPath());</span><br><span class="line">   System.exit(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  KeyStore kspkcs12 = KeyStore.getInstance(<span class="string">"pkcs12"</span>);</span><br><span class="line">  KeyStore ksjks = KeyStore.getInstance(<span class="string">"jks"</span>);</span><br><span class="line"></span><br><span class="line">  LineNumberReader in = <span class="keyword">new</span> LineNumberReader(<span class="keyword">new</span> InputStreamReader(</span><br><span class="line">    System.in));</span><br><span class="line">  System.out.<span class="built_in">print</span>(<span class="string">"Enter input keystore passphrase: "</span>);</span><br><span class="line">  <span class="keyword">char</span>[] inphrase = in.readLine().toCharArray();</span><br><span class="line">  System.out.<span class="built_in">print</span>(<span class="string">"Enter output keystore passphrase: "</span>);</span><br><span class="line">  <span class="keyword">char</span>[] outphrase = in.readLine().toCharArray();</span><br><span class="line"></span><br><span class="line">  kspkcs12.load(<span class="keyword">new</span> FileInputStream(fileIn), inphrase);</span><br><span class="line"></span><br><span class="line">  ksjks.load((fileOut.<span class="built_in">exists</span>()) ? <span class="keyword">new</span> FileInputStream(fileOut) : null, outphrase);</span><br><span class="line"></span><br><span class="line">  Enumeration eAliases = kspkcs12.aliases();</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">while</span> (eAliases.hasMoreElements()) &#123;</span><br><span class="line">   <span class="keyword">String</span> strAlias = (<span class="keyword">String</span>) eAliases.nextElement();</span><br><span class="line">   System.err.<span class="built_in">println</span>(<span class="string">"Alias "</span> + (n++) + <span class="string">": "</span> + strAlias);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">if</span> (kspkcs12.isKeyEntry(strAlias)) &#123;</span><br><span class="line">    System.err.<span class="built_in">println</span>(<span class="string">"Adding key for alias "</span> + strAlias);</span><br><span class="line">    Key key = kspkcs12.<span class="built_in">getKey</span>(strAlias, inphrase);</span><br><span class="line"></span><br><span class="line">    Certificate[] chain = kspkcs12.getCertificateChain(strAlias);</span><br><span class="line"></span><br><span class="line">    ksjks.setKeyEntry(strAlias, key, outphrase, chain);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  OutputStream out = <span class="keyword">new</span> FileOutputStream(fileOut);</span><br><span class="line">  ksjks.store(out, outphrase);</span><br><span class="line">  out.<span class="built_in">close</span>();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">void</span> dumpChain(Certificate[] chain) &#123;</span><br><span class="line">  <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chain.length; ++i) &#123;</span><br><span class="line">   Certificate cert = chain[i];</span><br><span class="line">   <span class="built_in">if</span> (cert instanceof X509Certificate) &#123;</span><br><span class="line">    X509Certificate x509 = (X509Certificate) chain[i];</span><br><span class="line">    System.err.<span class="built_in">println</span>(<span class="string">"subject: "</span> + x509.getSubjectDN());</span><br><span class="line">    System.err.<span class="built_in">println</span>(<span class="string">"issuer: "</span> + x509.getIssuerDN());</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>* 代码运行时，让输入    <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Enter <span class="selector-tag">input</span> keystore passphrase <span class="comment">//第4步输入的导出密码</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line">Enter output keystore passphrase:</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>* 最后输出    <figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Alias</span> <span class="number">0</span>: caserver_10year</span><br><span class="line">Adding <span class="keyword">key</span> <span class="keyword">for</span> <span class="keyword">alias</span> caserver_10year</span><br><span class="line"></span><br><span class="line"><span class="keyword">Alias</span> <span class="number">0</span>: remote_caserver_10year</span><br><span class="line">Adding <span class="keyword">key</span> <span class="keyword">for</span> <span class="keyword">alias</span> remote_caserver_10year</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;生成CA根证书&quot;&gt;&lt;a href=&quot;#生成CA根证书&quot; class=&quot;headerlink&quot; title=&quot;生成CA根证书&quot;&gt;&lt;/a&gt;生成CA根证书&lt;/h2&gt;&lt;h4 id=&quot;此处假设你已经安装好了openssl环境变量，如果没有可以百度一下如何配置。&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://www.code4a.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://www.code4a.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text Install Package Control</title>
    <link href="http://www.code4a.com/2017/11/22/sublime-text-install-package-control/"/>
    <id>http://www.code4a.com/2017/11/22/sublime-text-install-package-control/</id>
    <published>2017-11-22T04:47:31.000Z</published>
    <updated>2018-01-31T10:29:05.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sublime-Text-安装Package-Control"><a href="#Sublime-Text-安装Package-Control" class="headerlink" title="Sublime Text 安装Package Control"></a>Sublime Text 安装Package Control</h2><p>输入如下命令</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,<span class="built_in">os</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="built_in">open</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.join(ipp, pf), <span class="string">'wb'</span>).<span class="built_in">write</span>(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="built_in">read</span>())</span><br></pre></td></tr></table></figure><p>提示如下错误</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Error </span>loading /Users/xxx/Library/Application Support/Sublime Text 3/Installed Packages/Package Control.sublime-package: File is not a zip file</span><br></pre></td></tr></table></figure><p>此时需要参考<a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">Package Control</a>输入最新的安装命令即可解决该问题</p><ul><li>Sublime Text3</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = <span class="string">'6f4c264a24d933ce70df5dedcf1dcaee'</span> + <span class="string">'ebe013ee18cced0ef93d5f746d80ef60'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="keyword">by</span> = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.<span class="built_in">replace</span>(<span class="string">' '</span>, <span class="string">'%20'</span>)).<span class="built_in">read</span>(); dh = hashlib.sha256(<span class="keyword">by</span>).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="built_in">open</span>(os.path.join( ipp, pf), <span class="string">'wb'</span> ).<span class="built_in">write</span>(<span class="keyword">by</span>)</span><br></pre></td></tr></table></figure><ul><li>Sublime Text2</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib2,<span class="built_in">os</span>,hashlib; h = <span class="string">'6f4c264a24d933ce70df5dedcf1dcaee'</span> + <span class="string">'ebe013ee18cced0ef93d5f746d80ef60'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); <span class="built_in">os</span>.makedirs( ipp ) <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">os</span>.<span class="built_in">path</span>.exists(ipp) <span class="keyword">else</span> None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).<span class="built_in">read</span>(); dh = hashlib.sha256(by).hexdigest(); <span class="built_in">open</span>( <span class="built_in">os</span>.<span class="built_in">path</span>.join( ipp, pf), <span class="string">'wb'</span> ).<span class="built_in">write</span>(by) <span class="keyword">if</span> dh == h <span class="keyword">else</span> None; <span class="built_in">print</span>(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="string">'Please restart Sublime Text to finish installation'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Sublime-Text-安装Package-Control&quot;&gt;&lt;a href=&quot;#Sublime-Text-安装Package-Control&quot; class=&quot;headerlink&quot; title=&quot;Sublime Text 安装Package Control&quot;&gt;
      
    
    </summary>
    
      <category term="Tools" scheme="http://www.code4a.com/categories/Tools/"/>
    
    
      <category term="tools" scheme="http://www.code4a.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Vim常用命令记录</title>
    <link href="http://www.code4a.com/2017/11/04/Vim-Command-Used-Record/"/>
    <id>http://www.code4a.com/2017/11/04/Vim-Command-Used-Record/</id>
    <published>2017-11-04T02:24:24.000Z</published>
    <updated>2017-11-04T05:01:28.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vim常用命令"><a href="#Vim常用命令" class="headerlink" title="Vim常用命令"></a>Vim常用命令</h2><blockquote><p>一直在使用<code>Vim</code>编辑文件但是也只是略懂皮毛，只会使用一些简单地命令，操作编辑文件。为了熟练的使用<code>Vim</code>，在使用<code>Vim</code>编辑这篇文章的同时，也进行一些命令的练习和记录，方便以后更加高效的编辑文件。</p></blockquote><h5 id="vi编辑器支持编辑模式和命令模式，编辑模式下可以完成文本的编辑功能，命令模式下可以完成对文件的操作命令，要正确使用vi编辑器就必须熟练掌握两种模式的切换。默认情况下，打开vi编辑器后自动进入命令模式。从编辑模式切换到命令模式使用esc键，从命令模式切换到编辑模式使用A-a-O-o-I-i键。"><a href="#vi编辑器支持编辑模式和命令模式，编辑模式下可以完成文本的编辑功能，命令模式下可以完成对文件的操作命令，要正确使用vi编辑器就必须熟练掌握两种模式的切换。默认情况下，打开vi编辑器后自动进入命令模式。从编辑模式切换到命令模式使用esc键，从命令模式切换到编辑模式使用A-a-O-o-I-i键。" class="headerlink" title="vi编辑器支持编辑模式和命令模式，编辑模式下可以完成文本的编辑功能，命令模式下可以完成对文件的操作命令，要正确使用vi编辑器就必须熟练掌握两种模式的切换。默认情况下，打开vi编辑器后自动进入命令模式。从编辑模式切换到命令模式使用esc键，从命令模式切换到编辑模式使用A,a,O,o,I,i键。"></a>vi编辑器支持<em>编辑模式</em>和<em>命令模式</em>，<em>编辑模式</em>下可以完成文本的编辑功能，<em>命令模式</em>下可以完成对文件的操作命令，要正确使用vi编辑器就必须熟练掌握两种模式的切换。默认情况下，打开vi编辑器后自动进入<em>命令模式</em>。从<em>编辑模式</em>切换到<em>命令模式</em>使用<code>esc</code>键，从<em>命令模式</em>切换到<em>编辑模式</em>使用<code>A</code>,<code>a</code>,<code>O</code>,<code>o</code>,<code>I</code>,<code>i</code>键。</h5><hr><h3 id="命令模式下"><a href="#命令模式下" class="headerlink" title="命令模式下"></a>命令模式下</h3><ul><li><h5 id="游标操作"><a href="#游标操作" class="headerlink" title="游标操作"></a>游标操作</h5></li></ul><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td> h</td><td>游标向左移动</td></tr><tr><td> j</td><td>游标向下移动</td></tr><tr><td> k</td><td>游标向上移动</td></tr><tr><td> l</td><td>游标向右移动</td></tr><tr><td> w</td><td>向前移动一个单词</td></tr><tr><td> b</td><td>向后移动一个单词</td></tr><tr><td> e</td><td>向前移动一个单词，且游标指向单词的末尾</td></tr><tr><td> (</td><td>移动当前句子的首部</td></tr><tr><td> )</td><td>移动下一个句子的首部</td></tr><tr><td> {</td><td>移动当前段的首部</td></tr><tr><td> }</td><td>移动下一段的首部</td></tr><tr><td> [[</td><td>移到当前区段的首部</td></tr><tr><td> ]]</td><td>移到下一个区段的首部</td></tr><tr><td> 0</td><td>移到当前行的首部</td></tr><tr><td> $</td><td>移到当前行的尾部</td></tr><tr><td> ^</td><td>移到当前行第一个非空白字符的地方</td></tr><tr><td> <code>+</code> or RETURN</td><td>移动到下一行的第一个字符</td></tr><tr><td> <code>-</code></td><td>移动到上一行的第一个字符</td></tr><tr><td> /text</td><td>向下搜索text</td></tr><tr><td> ?text</td><td>向上搜索text</td></tr></tbody></table><ul><li><h5 id="切换编辑模式"><a href="#切换编辑模式" class="headerlink" title="切换编辑模式"></a>切换编辑模式</h5></li></ul><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td> A</td><td>当前行的尾部追加内容</td></tr><tr><td> i</td><td>游标前插入内容</td></tr><tr><td> I</td><td>游标后插入内容</td></tr><tr><td> o</td><td>在鼠标所在行的下面添加内容</td></tr><tr><td> O</td><td>在鼠标所在行的上面添加内容</td></tr><tr><td> cw</td><td>删除游标所在的字符，然后进入编辑模式</td></tr><tr><td> cc</td><td>删除游标所在的行，然后进入编辑模式</td></tr><tr><td> C</td><td>删除从游标所在的位置到行尾的字符，然后进入编辑模式</td></tr></tbody></table><ul><li><h5 id="内容编辑"><a href="#内容编辑" class="headerlink" title="内容编辑"></a>内容编辑</h5></li></ul><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td> dd</td><td>删除当前行</td></tr><tr><td> ndd</td><td>删除第n行</td></tr><tr><td> D</td><td>删除当前行游标所在的位置后面的字符</td></tr><tr><td> d}</td><td>删除当前段剩余的字符</td></tr><tr><td> d^</td><td>删除游标前到行首的字符</td></tr><tr><td> dL</td><td>删除从游标到屏幕的最后一行之间的内容</td></tr><tr><td> dG</td><td>删除从游标到文件末尾之间的内容</td></tr><tr><td> u</td><td>撤销最后的改变</td></tr><tr><td> U</td><td>还原当前行的内容</td></tr><tr><td> x</td><td>向后删除游标所在位置的字符</td></tr><tr><td> X</td><td>向前删除游标前面的字符</td></tr><tr><td> nX</td><td>删除前面的n个字符，游标所在的字符将不会被删</td></tr><tr><td> .</td><td>还原最后的改变</td></tr></tbody></table><ul><li><h5 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h5></li></ul><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td> :w</td><td>写文件</td></tr><tr><td> :w!</td><td>写文件，忽略警告信息</td></tr><tr><td> :w! file</td><td>覆盖文件，忽略警告信息</td></tr><tr><td> :wq</td><td>写文件之后退出编辑</td></tr><tr><td> :q</td><td>退出编辑器</td></tr><tr><td> :q!</td><td>强制退出编辑器</td></tr><tr><td> :w file</td><td>把文件的内容写到另一个文件</td></tr><tr><td> ZZ</td><td>退出编辑器，如果文件有改动，则保存再退出</td></tr><tr><td> :x</td><td>退出编辑器，如果文件有改动，则保存再退出</td></tr><tr><td> :n1,n2w file</td><td>把n1行到n2行间的内容写到文件file</td></tr><tr><td> :n1,n2w &gt;&gt; file</td><td>把n1行到n2行间的内容追加到文件file</td></tr><tr><td> :e file2</td><td>在当前文件的命令行模式下编辑file2</td></tr><tr><td> :e!</td><td>重新从磁盘加载文件</td></tr><tr><td> :e#</td><td>交替编辑文件</td></tr><tr><td> :n</td><td>编辑地下一行</td></tr><tr><td> :n!</td><td>编辑地下一行（忽略警告）</td></tr><tr><td> :r file</td><td>在游标后面插入文件</td></tr><tr><td> :r !command</td><td>在当前行的后面，插入运行命令后的输出内容</td></tr><tr><td> :set number</td><td>最左端显示行号</td></tr><tr><td> :set nonumber</td><td>最左端隐藏行号</td></tr></tbody></table><hr><h3 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h3><blockquote><p>该模式下就是文件的常规编写，输入任意字符进行编辑</p></blockquote><ul><li><h5 id="切换命令模式"><a href="#切换命令模式" class="headerlink" title="切换命令模式"></a>切换命令模式</h5></li></ul><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">操作</th></tr></thead><tbody><tr><td style="text-align:center">esc</td><td style="text-align:center">切换为命令模式</td></tr></tbody></table><h5 id="上述命令可进行命令模式下的文件操作"><a href="#上述命令可进行命令模式下的文件操作" class="headerlink" title="上述命令可进行命令模式下的文件操作"></a>上述命令可进行命令模式下的文件操作</h5><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p><a href="http://man.linuxde.net/vi" target="_blank" rel="noopener">vi命令</a><br><a href="http://www.cnblogs.com/junw_china/articles/1708967.html" target="_blank" rel="noopener">常用vi编辑器命令行</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vim常用命令&quot;&gt;&lt;a href=&quot;#Vim常用命令&quot; class=&quot;headerlink&quot; title=&quot;Vim常用命令&quot;&gt;&lt;/a&gt;Vim常用命令&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一直在使用&lt;code&gt;Vim&lt;/code&gt;编辑文件但是也只是略懂皮毛，只会
      
    
    </summary>
    
      <category term="Tools" scheme="http://www.code4a.com/categories/Tools/"/>
    
    
      <category term="tools" scheme="http://www.code4a.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2语法高亮配置</title>
    <link href="http://www.code4a.com/2017/11/04/iTerm2-Command-highlighter/"/>
    <id>http://www.code4a.com/2017/11/04/iTerm2-Command-highlighter/</id>
    <published>2017-11-04T02:00:58.000Z</published>
    <updated>2017-11-04T02:18:29.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iTerm2-语法高亮"><a href="#iTerm2-语法高亮" class="headerlink" title="iTerm2 语法高亮"></a>iTerm2 语法高亮</h2><h5 id="假如你没有配置过iTerm2可以参考Mac-下-iTerm2的安装及配置完成其安装和配置"><a href="#假如你没有配置过iTerm2可以参考Mac-下-iTerm2的安装及配置完成其安装和配置" class="headerlink" title="假如你没有配置过iTerm2可以参考Mac 下 iTerm2的安装及配置完成其安装和配置"></a>假如你没有配置过<code>iTerm2</code>可以参考<a href="http://www.code4a.com/2017/10/24/iTerm2-install-configuration/">Mac 下 iTerm2的安装及配置</a>完成其安装和配置</h5><blockquote><p>安装完<code>iTerm2</code>发现之前配置过得命令都找不到了，像<code>brew</code>,<code>npm</code>等命令，此时只需要更新一下<code>.bash_profile</code>文件即可</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> 打开配置文件</span><br><span class="line">sudo vi <span class="string">.bash_profile</span></span><br><span class="line"><span class="string">//</span> 添加如下路径，保存退出</span><br><span class="line">export PATH=<span class="string">/usr/local/bin</span>:$PATH</span><br><span class="line"><span class="string">//</span> 更新配置</span><br><span class="line">source ~<span class="string">/.bash_profile</span></span><br></pre></td></tr></table></figure><h3 id="语法高亮配置"><a href="#语法高亮配置" class="headerlink" title="语法高亮配置"></a>语法高亮配置</h3><ol><li>使用homebrew安装 zsh-syntax-highlighting 插件。</li></ol><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><ol><li>配置.zshrc文件，插入一行。</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/usr/</span>local<span class="regexp">/share/</span>zsh-syntax-highlighting<span class="regexp">/zsh-syntax-highlighting.zsh</span></span><br></pre></td></tr></table></figure><ol><li>更新配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;iTerm2-语法高亮&quot;&gt;&lt;a href=&quot;#iTerm2-语法高亮&quot; class=&quot;headerlink&quot; title=&quot;iTerm2 语法高亮&quot;&gt;&lt;/a&gt;iTerm2 语法高亮&lt;/h2&gt;&lt;h5 id=&quot;假如你没有配置过iTerm2可以参考Mac-下-iTerm
      
    
    </summary>
    
      <category term="Tools" scheme="http://www.code4a.com/categories/Tools/"/>
    
    
      <category term="tools" scheme="http://www.code4a.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>zsh: command not found: gradle/adb/..</title>
    <link href="http://www.code4a.com/2017/11/02/zsh-command-not-found-cmd/"/>
    <id>http://www.code4a.com/2017/11/02/zsh-command-not-found-cmd/</id>
    <published>2017-11-02T12:17:31.000Z</published>
    <updated>2017-11-04T02:02:36.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iTerm2下命令找不到"><a href="#iTerm2下命令找不到" class="headerlink" title="iTerm2下命令找不到"></a><code>iTerm2</code>下命令找不到</h2><blockquote><p>由于前段时间更新了命令行工具，导致这两天在<code>Android Studio</code>的命令行下找不到<code>adb</code>命令和<code>gradle</code>命令。因为<code>Android Studio</code>的命令行使用的就是默认的命令行工具，导致之前对<code>bash</code>的配置不生效。</p></blockquote><h5 id="如果你出现同样的问题可以参考Mac下command-not-found-gradle-adb终极解决方案这篇文章，可以很好地解决这个问题！"><a href="#如果你出现同样的问题可以参考Mac下command-not-found-gradle-adb终极解决方案这篇文章，可以很好地解决这个问题！" class="headerlink" title="如果你出现同样的问题可以参考Mac下command not found:gradle/adb终极解决方案这篇文章，可以很好地解决这个问题！"></a>如果你出现同样的问题可以参考<a href="http://blog.csdn.net/u010358168/article/details/61924807" target="_blank" rel="noopener">Mac下command not found:gradle/adb终极解决方案</a>这篇文章，可以很好地解决这个问题！</h5><h2 id="zsh-permission-denied-gradlew"><a href="#zsh-permission-denied-gradlew" class="headerlink" title="zsh: permission denied: ./gradlew"></a>zsh: permission denied: ./gradlew</h2><h5 id="在使用命令gradlew提交代码到jCenter时出现zsh-permission-denied-gradlew，第一反应是权限不够，然后再前边添加了sudo命令提高权限，紧接着又出现sudo-gradlew-command-not-found的提示，然后再网上搜索了一下原来是gradlew没有执行权限，因为之前在Terminal终端工具中是经常用的命令，换了iTerm2之后就忘记了是否之前添加过执行权限，真是好记性不如烂笔头，何况我这记性还不好。记录一下这种情况以及所需命令"><a href="#在使用命令gradlew提交代码到jCenter时出现zsh-permission-denied-gradlew，第一反应是权限不够，然后再前边添加了sudo命令提高权限，紧接着又出现sudo-gradlew-command-not-found的提示，然后再网上搜索了一下原来是gradlew没有执行权限，因为之前在Terminal终端工具中是经常用的命令，换了iTerm2之后就忘记了是否之前添加过执行权限，真是好记性不如烂笔头，何况我这记性还不好。记录一下这种情况以及所需命令" class="headerlink" title="在使用命令gradlew提交代码到jCenter时出现zsh: permission denied: ./gradlew，第一反应是权限不够，然后再前边添加了sudo命令提高权限，紧接着又出现sudo: ./gradlew: command not found的提示，然后再网上搜索了一下原来是gradlew没有执行权限，因为之前在Terminal终端工具中是经常用的命令，换了iTerm2之后就忘记了是否之前添加过执行权限，真是好记性不如烂笔头，何况我这记性还不好。记录一下这种情况以及所需命令"></a>在使用命令<code>gradlew</code>提交代码到<code>jCenter</code>时出现<code>zsh: permission denied: ./gradlew</code>，第一反应是权限不够，然后再前边添加了<code>sudo</code>命令提高权限，紧接着又出现<code>sudo: ./gradlew: command not found</code>的提示，然后再网上搜索了一下原来是<code>gradlew</code>没有执行权限，因为之前在<code>Terminal</code>终端工具中是经常用的命令，换了<code>iTerm2</code>之后就忘记了是否之前添加过执行权限，真是好记性不如烂笔头，何况我这记性还不好。记录一下这种情况以及所需命令</h5><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +<span class="keyword">x</span> gradlew</span><br></pre></td></tr></table></figure><h4 id="为gradlew增加可执行权限"><a href="#为gradlew增加可执行权限" class="headerlink" title="为gradlew增加可执行权限"></a>为<code>gradlew</code>增加可执行权限</h4><h2 id="发布代码到jCenter"><a href="#发布代码到jCenter" class="headerlink" title="发布代码到jCenter"></a>发布代码到jCenter</h2><h5 id="然后再执行发布到jCenter的命令，如果你也是使用的bintray-release的配置，可以使用以下命令。"><a href="#然后再执行发布到jCenter的命令，如果你也是使用的bintray-release的配置，可以使用以下命令。" class="headerlink" title="然后再执行发布到jCenter的命令，如果你也是使用的bintray-release的配置，可以使用以下命令。"></a>然后再执行发布到<a href="https://bintray.com/code4a" target="_blank" rel="noopener">jCenter</a>的命令，如果你也是使用的<a href="https://github.com/novoda/bintray-release" target="_blank" rel="noopener">bintray-release</a>的配置，可以使用以下命令。</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean build bintrayUpload <span class="attribute">-PbintrayUser</span>=BINTRAY_USERNAME <span class="attribute">-PbintrayKey</span>=BINTRAY_KEY <span class="attribute">-PdryRun</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;iTerm2下命令找不到&quot;&gt;&lt;a href=&quot;#iTerm2下命令找不到&quot; class=&quot;headerlink&quot; title=&quot;iTerm2下命令找不到&quot;&gt;&lt;/a&gt;&lt;code&gt;iTerm2&lt;/code&gt;下命令找不到&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;由于前段
      
    
    </summary>
    
      <category term="Tools" scheme="http://www.code4a.com/categories/Tools/"/>
    
    
      <category term="tools" scheme="http://www.code4a.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Centos7系统安装配置</title>
    <link href="http://www.code4a.com/2017/10/27/centos7-install-config/"/>
    <id>http://www.code4a.com/2017/10/27/centos7-install-config/</id>
    <published>2017-10-27T09:58:21.000Z</published>
    <updated>2017-10-27T10:55:41.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Centos-7-Mini安装配置过程"><a href="#Centos-7-Mini安装配置过程" class="headerlink" title="Centos 7 Mini安装配置过程"></a>Centos 7 Mini安装配置过程</h2><blockquote><p>由于工作的需要，出差到外地，需要部署局域网的服务器环境，方便这边环境的测试，安装过程也是几经波折，最终还是将环境部署成功，然后记录一下安装的过程。避免以后安装踩到一些未知的坑。</p></blockquote><h3 id="Centos7-镜像下载"><a href="#Centos7-镜像下载" class="headerlink" title="Centos7 镜像下载"></a>Centos7 镜像下载</h3><ul><li>请前往<a href="https://www.centos.org/download/" target="_blank" rel="noopener">Centos官网的下载页面</a>选择<code>DVD ISO</code>按钮，在我的<code>Mac</code>环境下就是直接启动了迅雷进行下载了，如果没有会进入到二级界面，此时请选择相应的镜像地址进行下载系统镜像</li></ul><h3 id="制作U盘启动盘"><a href="#制作U盘启动盘" class="headerlink" title="制作U盘启动盘"></a>制作U盘启动盘</h3><ul><li>U盘启动盘制作可以参考<a href="https://jingyan.baidu.com/article/49711c614d0971fa451b7c59.html" target="_blank" rel="noopener">这里</a>。 镜像也不需要拷贝到U盘里。我制作的时候有一步不太一样就是在写入之前，点击了<strong>便捷启动</strong> 引导选择 <code>linux</code> 的字样，然后选择写入。后边和链接里类似。</li></ul><h3 id="U盘引导进入安装Centos-7"><a href="#U盘引导进入安装Centos-7" class="headerlink" title="U盘引导进入安装Centos 7"></a>U盘引导进入安装Centos 7</h3><ol><li>如果你安装之前这台主机已经预装了<code>windows</code>系统，需用通过硬盘工具将整个磁盘删除，我当时是用另外一个<code>WinPE</code>的U盘引导进入，通过磁盘工具删除整个盘符，方便在后续安装中<code>Centos</code>安装程序能够识别硬盘。如果你的盘符已经删除或者是<code>Centos</code>可以识别的类型可以忽略这一步。</li><li>进入<code>Centos</code>引导界面，具体的可以参考<a href="http://www.linuxidc.com/Linux/2016-07/133646.htm" target="_blank" rel="noopener">这个链接</a> 的第二步</li></ol><h3 id="安装配置Centos-7"><a href="#安装配置Centos-7" class="headerlink" title="安装配置Centos 7"></a>安装配置Centos 7</h3><ul><li>具体的安装配置过程可以参考<a href="http://www.111cn.net/sys/CentOS/63645.htm" target="_blank" rel="noopener">CentOS 7.0系统安装配置步骤详解</a></li></ul><h5 id="为了big够大，选择安装的都是命令行的系统，命令行大神可以忽略后边的废话。为了配置方便此时需要在自己的个人笔记本上安装XShell工具进行远程连接，进行环境部署，环境部署的过程中可以需要网Centos上拷贝文件，此时还需要安装XFtp工具进行文件的拷贝。后续的数据库操作也需要在电脑上安装数据库操作的客户端Navicat。"><a href="#为了big够大，选择安装的都是命令行的系统，命令行大神可以忽略后边的废话。为了配置方便此时需要在自己的个人笔记本上安装XShell工具进行远程连接，进行环境部署，环境部署的过程中可以需要网Centos上拷贝文件，此时还需要安装XFtp工具进行文件的拷贝。后续的数据库操作也需要在电脑上安装数据库操作的客户端Navicat。" class="headerlink" title="为了big够大，选择安装的都是命令行的系统，命令行大神可以忽略后边的废话。为了配置方便此时需要在自己的个人笔记本上安装XShell工具进行远程连接，进行环境部署，环境部署的过程中可以需要网Centos上拷贝文件，此时还需要安装XFtp工具进行文件的拷贝。后续的数据库操作也需要在电脑上安装数据库操作的客户端Navicat。"></a>为了big够大，选择安装的都是命令行的系统，命令行大神可以忽略后边的废话。为了配置方便此时需要在自己的个人笔记本上安装<code>XShell</code>工具进行远程连接，进行环境部署，环境部署的过程中可以需要网<code>Centos</code>上拷贝文件，此时还需要安装<code>XFtp</code>工具进行文件的拷贝。后续的数据库操作也需要在电脑上安装数据库操作的客户端<code>Navicat</code>。</h5><h5 id="在数据库远程登录的过程中，如果出现-2003-10060-的错误时，可能就是Centos的防火墙未允许远程连接，此时需要修改防火墙配置文件，具体可参考远程连接linux下的mysql-Err1045-Err2003解决办法。"><a href="#在数据库远程登录的过程中，如果出现-2003-10060-的错误时，可能就是Centos的防火墙未允许远程连接，此时需要修改防火墙配置文件，具体可参考远程连接linux下的mysql-Err1045-Err2003解决办法。" class="headerlink" title="在数据库远程登录的过程中，如果出现 2003 # 10060 的错误时，可能就是Centos的防火墙未允许远程连接，此时需要修改防火墙配置文件，具体可参考远程连接linux下的mysql Err1045 Err2003解决办法。"></a>在数据库远程登录的过程中，如果出现 2003 # 10060 的错误时，可能就是<code>Centos</code>的防火墙未允许远程连接，此时需要修改防火墙配置文件，具体可参考<a href="http://www.cnblogs.com/K4Creative/p/5631516.html" target="_blank" rel="noopener">远程连接linux下的mysql Err1045 Err2003解决办法</a>。</h5><h3 id="以上推荐的链接都是在安装过程中搜索大量帖子之后筛选的最终解决问题的链接。以上链接可能符合个人的操作习惯，或者能解决某些问题。希望能有帮助。"><a href="#以上推荐的链接都是在安装过程中搜索大量帖子之后筛选的最终解决问题的链接。以上链接可能符合个人的操作习惯，或者能解决某些问题。希望能有帮助。" class="headerlink" title="以上推荐的链接都是在安装过程中搜索大量帖子之后筛选的最终解决问题的链接。以上链接可能符合个人的操作习惯，或者能解决某些问题。希望能有帮助。"></a>以上推荐的链接都是在安装过程中搜索大量帖子之后筛选的最终解决问题的链接。以上链接可能符合个人的操作习惯，或者能解决某些问题。希望能有帮助。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Centos-7-Mini安装配置过程&quot;&gt;&lt;a href=&quot;#Centos-7-Mini安装配置过程&quot; class=&quot;headerlink&quot; title=&quot;Centos 7 Mini安装配置过程&quot;&gt;&lt;/a&gt;Centos 7 Mini安装配置过程&lt;/h2&gt;&lt;bloc
      
    
    </summary>
    
      <category term="Tools" scheme="http://www.code4a.com/categories/Tools/"/>
    
    
      <category term="tools" scheme="http://www.code4a.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Mac 下 iTerm2的安装及配置</title>
    <link href="http://www.code4a.com/2017/10/24/iTerm2-install-configuration/"/>
    <id>http://www.code4a.com/2017/10/24/iTerm2-install-configuration/</id>
    <published>2017-10-24T05:43:46.000Z</published>
    <updated>2017-10-24T06:28:03.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac下安装iTerm2以及配色方案"><a href="#Mac下安装iTerm2以及配色方案" class="headerlink" title="Mac下安装iTerm2以及配色方案"></a>Mac下安装iTerm2以及配色方案</h2><blockquote><p>工欲善其事，必先利其器</p></blockquote><p>在好友博客中看到了一个终端工具iTerm2的使用及配色方案，感觉这个工具程序呈现的外观看着很舒服，所以自己也参照他的方案进行了配置，然后在网上搜索到这个工具同时也可以修改Vim的配色，所以就想流程记录了一下，方便日后再次部署是查看。</p><h3 id="iTerm2安装和配色"><a href="#iTerm2安装和配色" class="headerlink" title="iTerm2安装和配色"></a>iTerm2安装和配色</h3><p>参考效果图：<br><img src="https://raw.githubusercontent.com/code4a/code4a.github.io/master/bimg/iTerm2-previews.png" alt="iTerm2效果图"></p><p>具体步骤可参考<a href="http://audiebant.site/" target="_blank" rel="noopener">audiebantzhan</a>的<a href="http://audiebant.site/2016/01/11/iterm2-themes/" target="_blank" rel="noopener">这篇博文</a>可以解决在安装过程中遇到的问题。</p><h3 id="iTerm2-Vim配色"><a href="#iTerm2-Vim配色" class="headerlink" title="iTerm2 Vim配色"></a>iTerm2 Vim配色</h3><p>参考效果图：<br><img src="https://raw.githubusercontent.com/code4a/code4a.github.io/master/bimg/iTerm2-Vim-previews.png" alt="iTerm2-Vim效果图"></p><p>在第一步中配置工具颜色的时候，会下载到最流行的配色解决方案<a href="http://ethanschoonover.com/solarized" target="_blank" rel="noopener">Solarized</a>，Vim 的配色最好和终端的配色保持一致，不然有可能会觉得很别扭，能接受的可以除外。具体流程如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> solarized</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> vim-colors-solarized/colors</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p ~/.vim/colors</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp solarized.vim ~/.vim/colors/</span></span><br></pre></td></tr></table></figure><p>然后需要编辑配置文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.vimrc</span><br><span class="line">syntax enable</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">background</span>=dark</span><br><span class="line">colorscheme solarized</span><br></pre></td></tr></table></figure><p>关闭重新打开Vim 就可以看到效果</p><h3 id="致谢及内容出处"><a href="#致谢及内容出处" class="headerlink" title="致谢及内容出处"></a>致谢及内容出处</h3><p><a href="http://audiebant.site/2016/01/11/iterm2-themes/" target="_blank" rel="noopener">iTerm2 Configuration</a><br><a href="http://www.cnblogs.com/gslyyq/p/5251331.html" target="_blank" rel="noopener">Mac vim iterm2配色方案</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mac下安装iTerm2以及配色方案&quot;&gt;&lt;a href=&quot;#Mac下安装iTerm2以及配色方案&quot; class=&quot;headerlink&quot; title=&quot;Mac下安装iTerm2以及配色方案&quot;&gt;&lt;/a&gt;Mac下安装iTerm2以及配色方案&lt;/h2&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="Tools" scheme="http://www.code4a.com/categories/Tools/"/>
    
    
      <category term="tools" scheme="http://www.code4a.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Beyond Compare for Mac 无限试用方法</title>
    <link href="http://www.code4a.com/2017/10/23/beyond-compare-for-mac-install-free-use/"/>
    <id>http://www.code4a.com/2017/10/23/beyond-compare-for-mac-install-free-use/</id>
    <published>2017-10-23T04:37:44.000Z</published>
    <updated>2017-10-23T09:51:41.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Beyond-Compare-For-Mac"><a href="#Beyond-Compare-For-Mac" class="headerlink" title="Beyond Compare For Mac"></a>Beyond Compare For Mac</h2><h3 id="Beyond-Compare-下载试用原理"><a href="#Beyond-Compare-下载试用原理" class="headerlink" title="Beyond Compare 下载试用原理"></a>Beyond Compare 下载试用原理</h3><h4 id="在Beyond-Compare官网下载最新的-Beyond-Compare"><a href="#在Beyond-Compare官网下载最新的-Beyond-Compare" class="headerlink" title="在Beyond Compare官网下载最新的 Beyond Compare"></a>在<a href="http://www.scootersoftware.com/download.php" target="_blank" rel="noopener">Beyond Compare官网</a>下载最新的 Beyond Compare</h4><h5 id="解压后-把-Beyond-Compare-复制到应用程序中，选中图标，右键点击“显示包内容”，逐步进入-Beyond-Compare-应用程序的-MacOS-目录下-Applications-Beyond-Compare-app-Contents-MacOS"><a href="#解压后-把-Beyond-Compare-复制到应用程序中，选中图标，右键点击“显示包内容”，逐步进入-Beyond-Compare-应用程序的-MacOS-目录下-Applications-Beyond-Compare-app-Contents-MacOS" class="headerlink" title="解压后, 把 Beyond Compare 复制到应用程序中，选中图标，右键点击“显示包内容”，逐步进入 Beyond Compare 应用程序的 MacOS 目录下(/Applications/Beyond Compare.app/Contents/MacOS)"></a>解压后, 把 <code>Beyond Compare</code> 复制到应用程序中，选中图标，右键点击“显示包内容”，逐步进入 <code>Beyond Compare</code> 应用程序的 <code>MacOS</code> 目录下(<code>/Applications/Beyond Compare.app/Contents/MacOS</code>)</h5><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><p><code>BCompare</code> 是应用程序启动的程序. 只要在启动的时候删除 <code>registry.dat</code> (<code>Library/Application Support/Beyond Compare/registry.dat</code>)注册信息就好了.<br>为此可以在该目录下添加一个批处理文件用来处理这个操作.</p><h5 id="具体操作如下"><a href="#具体操作如下" class="headerlink" title="具体操作如下:"></a>具体操作如下:</h5><ol><li>将主启动程序 <code>BCompare</code> 重命名为 <code>BCompare.real</code></li><li><p>在同级目录下新建一个脚本文件,命名为 <code>BCompare</code>,这样 <code>BCompare</code> 在启动的时候就会执行该脚本文件,注意记得 <code>chmod a+x BCompare</code></p><ul><li><p>使用文本编辑工具(如：<code>Sublime Text</code>)新建一个文件，在里面写如下代码，第一行是注明解释器，第二行是删除注册信息，第三行是启动真正的主程序。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">rm <span class="string">"/Users/<span class="variable">$(whoami)</span>/Library/Application Support/Beyond Compare/registry.dat"</span></span><br><span class="line"><span class="string">"`dirname "</span><span class="variable">$0</span><span class="string">"`"</span>/BCompare.real <span class="variable">$@</span></span><br></pre></td></tr></table></figure></li><li><p>然后保存文件到名称为<code>BCompare.sh</code>到<code>Beyond Compare</code> 应用程序的 <code>MacOS</code> 目录下(<code>/Applications/Beyond Compare.app/Contents/MacOS</code>)</p></li><li>重新打开该文件查看是否有多余内容，如果有删除掉，保存关闭软件，然后选中该文件<code>Command + i</code>显示文件简介，去掉<code>.sh</code>后缀</li><li><p>最后在终端使用 cd 命令进入 <code>MacOS</code> 目录，执行 <code>chmod a+x BCompare</code></p>  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /Applications/Beyond\ <span class="keyword">Compare</span>.<span class="keyword">app</span>/Contents/MacOS/</span><br><span class="line">chmod a+x BCompare</span><br></pre></td></tr></table></figure></li><li><p>这样我们每次打开软件的时候，都会先自动删掉注册信息，也就是永久免费试用了</p></li></ul></li></ol><h2 id="参考致谢"><a href="#参考致谢" class="headerlink" title="参考致谢"></a>参考致谢</h2><p><a href="http://www.seidea.com/" target="_blank" rel="noopener">Seidea</a>的<a href="http://www.seidea.com/2017/03/23/beyond-compare-for-mac-%E6%97%A0%E9%99%90%E8%AF%95%E7%94%A8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">Beyond Compare for Mac 无限试用方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Beyond-Compare-For-Mac&quot;&gt;&lt;a href=&quot;#Beyond-Compare-For-Mac&quot; class=&quot;headerlink&quot; title=&quot;Beyond Compare For Mac&quot;&gt;&lt;/a&gt;Beyond Compare For M
      
    
    </summary>
    
      <category term="Tools" scheme="http://www.code4a.com/categories/Tools/"/>
    
    
      <category term="tools" scheme="http://www.code4a.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>创建hexo新文章笔记</title>
    <link href="http://www.code4a.com/2017/10/23/create-new-blog-method/"/>
    <id>http://www.code4a.com/2017/10/23/create-new-blog-method/</id>
    <published>2017-10-23T02:50:55.000Z</published>
    <updated>2017-10-23T09:51:34.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建我的新文章"><a href="#创建我的新文章" class="headerlink" title="创建我的新文章"></a>创建我的新文章</h2><blockquote><p>好记性不如烂笔头，好长时间不更新博客了，连更新的流程和方法都忘记了，所以时下记得很清楚的东西，还是要用文本记录下来，方便日后忘记再次查看！</p></blockquote><h3 id="命令行进入到blog文件夹根目录"><a href="#命令行进入到blog文件夹根目录" class="headerlink" title="命令行进入到blog文件夹根目录"></a>命令行进入到blog文件夹根目录</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> 自己的路径<span class="string">/blog/</span></span><br></pre></td></tr></table></figure><h3 id="通过hexo命令创建新博文"><a href="#通过hexo命令创建新博文" class="headerlink" title="通过hexo命令创建新博文"></a>通过hexo命令创建新博文</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"博文名称"</span> <span class="comment"><span class="markdown">/<span class="strong">** 创建新的博文 **</span>/</span></span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">hexo <span class="keyword">new</span> post <span class="string">"博文名称"</span></span><br></pre></td></tr></table></figure><h3 id="编辑博文"><a href="#编辑博文" class="headerlink" title="编辑博文"></a>编辑博文</h3><p>通过上边的代码会将新的博文创建在<code>source/_posts/</code> 的文件夹下，然后进入到<code>路径/blog/source/_posts</code>目录下，找到刚刚创建的“博文名称.md”使用 <code>markdown</code>工具进行编辑博客内容。不知道<code>markdow</code>格式的可以参考<a href="http://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown语法说明</a>对比书写自己的博文</p><h3 id="编辑生成静态博客"><a href="#编辑生成静态博客" class="headerlink" title="编辑生成静态博客"></a>编辑生成静态博客</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">hexo <span class="keyword">generate</span> <span class="comment">/** 生成一套静态网页 **/</span></span><br></pre></td></tr></table></figure><p>生成的博客内容就在当前路径的 <code>public</code>目录下</p><h3 id="本地预览完整博客内容"><a href="#本地预览完整博客内容" class="headerlink" title="本地预览完整博客内容"></a>本地预览完整博客内容</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">hexo <span class="keyword">server</span> <span class="comment">/** 在本地建立 Server ，提供访问和浏览 **/</span></span><br></pre></td></tr></table></figure><p>浏览器访问地址 <code>http://0.0.0.0:4000/</code></p><h3 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h3><p>可以通过github desktop提交变更到github仓库，等待一会编译通过，新的文章就更新进去了</p><p>也可以通过命令行进行提交。<br>使用BCompare 对比两个目录的差异，进行更新<br>然后通过命令行进行提交</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . <span class="comment">// # 将所有修改过的工作文件提交暂存区</span></span><br><span class="line">git commit -m “the commit message<span class="string">"</span></span><br><span class="line">git push origin master <span class="meta"># 将本地主分支推到远程主分支</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>更多详细的配置内容可以参考以下链接<br><a href="http://blog.fens.me/hexo-blog-github/" target="_blank" rel="noopener">Hexo在github上构建免费的Web应用</a><br><a href="https://ninghao.net/blog/1412" target="_blank" rel="noopener">使用 Hexo 生成一套静态博客网页</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建我的新文章&quot;&gt;&lt;a href=&quot;#创建我的新文章&quot; class=&quot;headerlink&quot; title=&quot;创建我的新文章&quot;&gt;&lt;/a&gt;创建我的新文章&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;好记性不如烂笔头，好长时间不更新博客了，连更新的流程和方法都忘记了，所以时
      
    
    </summary>
    
      <category term="hexo" scheme="http://www.code4a.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.code4a.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>RxJava Study two</title>
    <link href="http://www.code4a.com/2016/03/16/RxJava-Study-two/"/>
    <id>http://www.code4a.com/2016/03/16/RxJava-Study-two/</id>
    <published>2016-03-16T08:05:53.000Z</published>
    <updated>2017-10-23T09:50:31.688Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="RxJava" scheme="http://www.code4a.com/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="http://www.code4a.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>使用NanoHTTPD在Android上建立本地服务器</title>
    <link href="http://www.code4a.com/2016/03/11/NanoHTTPD-Simple-Use/"/>
    <id>http://www.code4a.com/2016/03/11/NanoHTTPD-Simple-Use/</id>
    <published>2016-03-11T10:22:51.000Z</published>
    <updated>2017-10-23T09:59:02.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用NanoHTTPD在Android上建立本地服务器"><a href="#使用NanoHTTPD在Android上建立本地服务器" class="headerlink" title="使用NanoHTTPD在Android上建立本地服务器"></a>使用NanoHTTPD在Android上建立本地服务器</h2><blockquote><p>因为项目需求，需要在Android端的Service上实现一个简单的服务器，方便客户端发送Http请求，完成对应的自动化流程，<br>通过查阅相关资料，最终决定采用NanoHTTPD</p></blockquote><ul><li><h4 id="NanoHTTPD项目地址"><a href="#NanoHTTPD项目地址" class="headerlink" title="NanoHTTPD项目地址"></a><a href="https://github.com/NanoHttpd/nanohttpd" target="_blank" rel="noopener">NanoHTTPD项目地址</a></h4></li></ul><p>在 <strong><a href="https://github.com/NanoHttpd/nanohttpd/releases" target="_blank" rel="noopener">releases</a></strong> 界面下载nanohttpd-2.2.0.jar导入eclipse的工程中，因为目前的项目是迭代早期的项目，而且也并未往Android Studio上迁移，在AS上的依赖可以参考项目的  <strong><a href="https://github.com/NanoHttpd/nanohttpd/blob/master/README.md" target="_blank" rel="noopener">Readme</a></strong> 进行配置</p><p>使用起来非常的简单，服务端的代码实现如下：</p><h4 id="1-单独的类集成NanoHTTPD"><a href="#1-单独的类集成NanoHTTPD" class="headerlink" title="1. 单独的类集成NanoHTTPD"></a>1. 单独的类集成NanoHTTPD</h4><pre><code>package com.cmcc.receiver.transfer;import java.util.HashMap;import java.util.Map;import java.util.Set;import android.os.Handler;import android.os.Message;import android.text.TextUtils;import android.util.Log;import com.cmcc.receiver.consts.Constants;import fi.iki.elonen.NanoHTTPD;public class WiMoTransferServer extends NanoHTTPD {  public static final int DEFAULT_SERVER_PORT = 8080;  public static final String TAG = WiMoTransferServer.class.getSimpleName();  private static final String NOTHING = &quot;/favicon.ico&quot;;  // ip:8080/cmd=set_interent&amp;target_ssid=WiMO-xxxx&amp;password=12345678  // cmd=set_interent&amp;target_ssid=netgear54&amp;password=11111111  private static final String REQUEST_ROOT = &quot;/&quot;;  private Handler mHander;  public WiMoTransferServer(Handler mHandler) {      super(DEFAULT_SERVER_PORT);      this.mHander = mHandler;  }  @Override  public Response serve(IHTTPSession session) {      // TODO Auto-generated method stub      Log.i(TAG, &quot;IHTTPSession : -&gt; &quot; + session.getMethod() + &quot; , uri : -&gt; &quot; + session.getUri());      Response response = super.serve(session);      String uriStr = session.getUri();      switch (session.getMethod()) {      case GET:          if (NOTHING.equals(uriStr) || REQUEST_ROOT.equals(uriStr)) {              Log.i(TAG, &quot;request url = &quot; + NOTHING);              response = response404(session, uriStr);          } else if (!TextUtils.isEmpty(uriStr) &amp;&amp; uriStr.contains(Constants.EQUAL)) {              Map&lt;String, String&gt; paramsMap = parseURLRequest(uriStr);              checkParamsResult(paramsMap);              String cmdResult = paramsMap.get(Constants.CMD);              Log.i(TAG, &quot; cmdResult -&gt; &quot; + cmdResult);              if (!TextUtils.isEmpty(cmdResult) &amp;&amp; Constants.SETINTERNET.equals(cmdResult)) {                  String targetSSID = paramsMap.get(Constants.TARGETSSID);                  String pwd = paramsMap.get(Constants.PWD);                  Log.i(TAG, &quot;targetSSID = &quot; + targetSSID + &quot; ,password = &quot; + pwd);                  Message msg = mHander.obtainMessage(Constants.MSG_CONNECT_TARGET_AP);                  msg.obj = targetSSID + Constants.SPLIT + pwd;                  mHander.sendMessage(msg);              }              response = responseSuccess();          }          // default:          // Log.i(TAG, &quot;request method is not GET&quot;);          // response = response404(session, uriStr);          // break;      }      return response;  }  public void checkParamsResult(Map&lt;String, String&gt; paramsMap) {      Set&lt;String&gt; keySet = paramsMap.keySet();      for (String key : keySet) {          String value = paramsMap.get(key);          Log.i(TAG, &quot;params_Key: -&gt; &quot; + key + &quot; ,params_Value: -&gt; &quot; + value);      }  }  /**   * 解析出url参数中的键值对 如   * &quot;ip:8080/cmd=set_interent&amp;target_ssid=WiMO-xxxx&amp;password=12345678&quot;，   * 解析出cmd:set_interent,target_ssid:WiMO-xxxx,password:12345678存入map中   *   * @param URL   *            url地址   * @return url请求参数部分   */  public Map&lt;String, String&gt; parseURLRequest(String URL) {      Map&lt;String, String&gt; mapRequest = new HashMap&lt;String, String&gt;();      String[] arrSplit = null;      String strUrlParam = truncateUrlPage(URL);      if (strUrlParam == null) {          return mapRequest;      }      // 每个键值为一组      arrSplit = strUrlParam.split(&quot;[&amp;]&quot;);      for (String strSplit : arrSplit) {          String[] arrSplitEqual = null;          arrSplitEqual = strSplit.split(&quot;[=]&quot;);          // 解析出键值          if (arrSplitEqual.length &gt; 1) {              // 正确解析              mapRequest.put(arrSplitEqual[0], arrSplitEqual[1]);          } else {              if (arrSplitEqual[0] != &quot;&quot;) {                  // 只有参数没有值，不加入                  mapRequest.put(arrSplitEqual[0], &quot;&quot;);              }          }      }      return mapRequest;  }  /**   * 去掉url中的路径，留下请求参数部分   *   * @param strURL   *            url地址   * @return url请求参数部分   */  public String truncateUrlPage(String strURL) {      String strAllParam = null;      String[] arrSplit = null;      strURL = strURL.trim().toLowerCase();      if (strURL.contains(&quot;[?]&quot;)) {          arrSplit = strURL.split(&quot;[?]&quot;);          if (strURL.length() &gt; 1) {              if (arrSplit.length &gt; 1) {                  if (arrSplit[1] != null) {                      strAllParam = arrSplit[1];                  }              }          }      } else if (strURL.startsWith(REQUEST_ROOT)) {          strAllParam = strURL.substring(strURL.indexOf(REQUEST_ROOT) + 1);          Log.i(TAG, &quot; strAllParam substring result : -&gt; &quot; + strAllParam);      } else {          strAllParam = strURL;      }      return strAllParam;  }  public Response responseSuccess() {      StringBuilder builder = new StringBuilder();      builder.append(&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&quot;);      builder.append(&quot;Success!&quot;);      builder.append(&quot;&lt;/body&gt;&lt;/html&gt;\n&quot;);      return newFixedLengthResponse(builder.toString());  }  public Response response404(IHTTPSession session, String url) {      StringBuilder builder = new StringBuilder();      builder.append(&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&quot;);      builder.append(&quot;Sorry, Can&apos;t Found &quot; + url + &quot; !&quot;);      builder.append(&quot;&lt;/body&gt;&lt;/html&gt;\n&quot;);      return newFixedLengthResponse(builder.toString());  }}</code></pre><h4 id="2-在service中初始化WiMoTransferServer对象"><a href="#2-在service中初始化WiMoTransferServer对象" class="headerlink" title="2. 在service中初始化WiMoTransferServer对象"></a>2. 在service中初始化WiMoTransferServer对象</h4><pre><code>private void initWebServer() {    mWiMoTransferServer = new WiMoTransferServer(mHandler);    try {        mWiMoTransferServer.start();    } catch (IOException e) {        e.printStackTrace();    }}</code></pre><p>  在需要初始化server的地方调用该方法，在需要停止服务的地方调用</p><pre><code>mWiMoTransferServer.stop();</code></pre><h4 id="3-然后再客户端中通过http请求发送到该服务的ip地址，然后再做详细的处理和响应"><a href="#3-然后再客户端中通过http请求发送到该服务的ip地址，然后再做详细的处理和响应" class="headerlink" title="3. 然后再客户端中通过http请求发送到该服务的ip地址，然后再做详细的处理和响应"></a>3. 然后再客户端中通过http请求发送到该服务的ip地址，然后再做详细的处理和响应</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用NanoHTTPD在Android上建立本地服务器&quot;&gt;&lt;a href=&quot;#使用NanoHTTPD在Android上建立本地服务器&quot; class=&quot;headerlink&quot; title=&quot;使用NanoHTTPD在Android上建立本地服务器&quot;&gt;&lt;/a&gt;使用Nan
      
    
    </summary>
    
      <category term="android" scheme="http://www.code4a.com/categories/android/"/>
    
    
      <category term="NanoHTTPD-Android" scheme="http://www.code4a.com/tags/NanoHTTPD-Android/"/>
    
  </entry>
  
  <entry>
    <title>RxJava学习笔记(一)</title>
    <link href="http://www.code4a.com/2016/03/10/RxJava-Study-first/"/>
    <id>http://www.code4a.com/2016/03/10/RxJava-Study-first/</id>
    <published>2016-03-10T15:31:02.000Z</published>
    <updated>2017-10-23T09:50:44.776Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于目前工作比较安逸，成了温水青蛙，长期以往的惰性，导致了好多新知识还停留在听过的阶段，作为一个软件工程师来说，这是致命的缺点.<br>为了重拾原有的拼劲和热情，所以自己决定做出改变，就以当下比较流程的RxJava的学习去转变！丰富自己技能的同时，也养成坚持写博客的习惯！</p></blockquote><ul><li><p><strong><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava项目地址</a></strong></p></li><li><p>关于RxJava的简介和优点可以参考</p></li><li><p><strong><a href="http://mrfu.me/android/2015/11/11/Getting_Started_with_RxJava_and_Android/" target="_blank" rel="noopener">RxJava 入门</a></strong></p></li></ul><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h3><blockquote><p>工欲善其事，必先利其器</p></blockquote><p>  a.首先打开Android Studio创建项目，然后根据RxJava的Readme中描述在AS中的使用方法</p><p>  Example for Gradle:</p><pre><code>compile &apos;io.reactivex:rxjava:x.y.z&apos;</code></pre><p>  b.然后再项目的Module的根目录<code>build.gradle</code>文件中添加项目依赖，查看Github中Release分支中看到的RxJava版本为1.1.1, 所以最终添加的内容</p><pre><code>compile &apos;io.reactivex:rxjava:1.1.1&apos;</code></pre><p>  然后点击上边的出现的 <code>Sync Now</code> 等待依赖下载完成，即准备工作完成</p><h3 id="2-牛刀小试"><a href="#2-牛刀小试" class="headerlink" title="2.牛刀小试"></a>2.牛刀小试</h3><blockquote><p>敲码百变，其义自现</p></blockquote><p>  a.Hello Wrold</p><ul><li><p>先创建Observable</p><pre><code>rx.Observable&lt;String&gt; myObservable = rx.Observable.create(      new rx.Observable.OnSubscribe&lt;String&gt;() {          @Override          public void call(rx.Subscriber&lt;? super String&gt; sub) {              sub.onNext(&quot;Hello, world!&quot;);              sub.onCompleted();          }      });</code></pre></li><li><p>Observable发送“Hello,world!”消息然后完成。接着创建Subscriber来消费这个数据：</p><pre><code>rx.Subscriber&lt;String&gt; mySubscriber = new rx.Subscriber&lt;String&gt;() {    @Override    public void onNext(String s) {        Log.i(TAG, &quot; s -&gt; &quot; + s);    }    @Override    public void onCompleted() {        Log.i(TAG, &quot; onCompleted() &quot;);    }    @Override    public void onError(Throwable e) {    }};</code></pre></li><li><p>上面代码所做的工作就是打印由Observable发送的字符串。现在我们有了myObservable和mySubscriber，就可以通过subscribe()函数把两者关联起来：</p><pre><code>myObservable.subscribe(mySubscriber);</code></pre></li><li><p>当订阅完成，myObservable将调用subscriber的onNext()和onComplete()函数，最终mySubscriber打印“Hello, world!”然后终止。</p><pre><code>03-10 11:55:42.784 4249-4249/com.code4a I/HiddenTitleActivity:  s -&gt; Hello, world!03-10 11:55:42.784 4249-4249/com.code4a I/HiddenTitleActivity:  onCompleted() </code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于目前工作比较安逸，成了温水青蛙，长期以往的惰性，导致了好多新知识还停留在听过的阶段，作为一个软件工程师来说，这是致命的缺点.&lt;br&gt;为了重拾原有的拼劲和热情，所以自己决定做出改变，就以当下比较流程的RxJava的学习去转变！丰富自己技能的同时，
      
    
    </summary>
    
      <category term="RxJava" scheme="http://www.code4a.com/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="http://www.code4a.com/tags/RxJava/"/>
    
  </entry>
  
</feed>
