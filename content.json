{"meta":{"title":"蒋彦涛的个人博客","subtitle":"Code 4 Android / ...","description":"Write Change Share","author":"code4a","url":"http://www.code4a.com"},"pages":[{"title":"关于","date":"2015-11-11T16:37:36.000Z","updated":"2017-10-23T10:47:23.259Z","comments":false,"path":"about/index.html","permalink":"http://www.code4a.com/about/index.html","excerpt":"","text":"关于我目前就职于文思海辉，软件开发工程师。主要精力Android移动开发喜欢编码，比较愿意投入大量的时间捣鼓自己感兴趣的方面进行中Python、C/C++、jekyll、Markdown、OC坐标：帝都联系方式邮箱：jiangyantaodev@163.com微博：code4a微信公众号 网易云音乐 document.write(unescape('%3Cdiv id=\"hm_t_84474\"%3E%3C/div%3E%3Cscript charset=\"utf-8\" src=\"http://crs.baidu.com/t.js?siteId=10a6f47c8748e79b467735e352158e22&planId=84474&async=0&referer=') + encodeURIComponent(document.referrer) + '&title=' + encodeURIComponent(document.title) + '&rnd=' + (+new Date) + unescape('\"%3E%3C/script%3E'));"},{"title":"乾坤大挪移","date":"2015-11-13T15:08:10.000Z","updated":"2017-10-23T09:49:47.001Z","comments":false,"path":"cheats/index.html","permalink":"http://www.code4a.com/cheats/index.html","excerpt":"","text":"收录整理优秀的博文链接，帮助学习进阶，不断更新中… 干货 &amp;&amp; 进阶 使用Rxjava构建Android清晰框架 GitHub Android Libraries Top 100 简介 Android手机如何录制屏幕及转GIF Android Stuido 系列 Android Studio 小技巧合集"},{"title":"categories","date":"2017-10-23T09:27:02.000Z","updated":"2017-10-23T09:27:39.957Z","comments":false,"path":"categories/index.html","permalink":"http://www.code4a.com/categories/index.html","excerpt":"","text":""},{"title":"仗键乱弹","date":"2015-11-13T15:24:12.000Z","updated":"2017-10-23T09:49:34.234Z","comments":false,"path":"chessbook/index.html","permalink":"http://www.code4a.com/chessbook/index.html","excerpt":"","text":"记录Android开发过程中的琐碎记录，Api和新内容的学习分享交流 编程思想 教你编写现代化的java程式1 RxJava 学习系列 RxJava学习笔记(一)"},{"title":"links","date":"2017-01-28T15:01:17.000Z","updated":"2017-10-23T08:40:50.078Z","comments":false,"path":"links/index.html","permalink":"http://www.code4a.com/links/index.html","excerpt":"","text":""},{"title":"诗词文集库","date":"2015-11-13T15:17:13.000Z","updated":"2017-10-23T09:48:30.900Z","comments":false,"path":"life/index.html","permalink":"http://www.code4a.com/life/index.html","excerpt":"","text":"记录编码之外阅读到有趣有意义的网络读物的链接 励志类 创业是一种最令人‘抓狂’的生活方式，没有之一 你为自己想要的生活，拼尽全力了吗？ 爱情 干了这碗鸡汤，我们仍要爱"},{"title":"tags","date":"2017-10-23T08:25:02.000Z","updated":"2017-10-23T08:27:10.974Z","comments":false,"path":"tags/index.html","permalink":"http://www.code4a.com/tags/index.html","excerpt":"","text":""},{"title":"葵花宝典","date":"2015-11-13T15:18:00.000Z","updated":"2017-10-23T09:48:59.676Z","comments":false,"path":"opensrc/index.html","permalink":"http://www.code4a.com/opensrc/index.html","excerpt":"","text":"简单展示新颖热门的开源库，持续更新中 WheelView lantouzi的WheelView-Android"}],"posts":[{"title":"Flutter-Native混合解决方案-FlutterBoost集成步骤","slug":"Flutter-Native混合解决方案-FlutterBoost集成步骤","date":"2020-04-02T03:41:50.000Z","updated":"2020-04-02T03:42:44.355Z","comments":false,"path":"2020/04/02/Flutter-Native混合解决方案-FlutterBoost集成步骤/","link":"","permalink":"http://www.code4a.com/2020/04/02/Flutter-Native混合解决方案-FlutterBoost集成步骤/","excerpt":"","text":"创建Android项目，默认支持了AndroidX 创建Flutter项目，同样选择支持AndroidX 以上两个步骤直接按流程创建下来即可，两个项目最好是在同级目录，方便后续gradle配置在同一个窗口打开编辑文件。 此处记录一下通过Terminal面板创建flutter module，输入以下命令： 12345// 回到上一级目录cd ..// --androidx 使用Androidx// --org：定义项目的包名flutter create --androidx --org com.code4a -t module fb_demo 在Android项目的settings.gradle中增加如下内容并sync gradle 123456789rootProject.name='BoostSimple'include ':app'// 新增内容setBinding(new Binding([gradle: this]))evaluate(new File(settingsDir.parentFile, '/fb_demo/.android/include_flutter.groovy'))// 以下内容为自动生成，如果没有可自己添加配置，// 这样Android Studio就会改变Project结构同时打开Android和Flutter项目方便编辑include ':fb_demo'project(':fb_demo').projectDir = new File('../fb_demo') 构建完成后会生成一个flutter的Android Module，此时可在app的build.gradle中添加依赖 1implementation project(':flutter') 为flutter项目添加flutter_boost依赖，具体对应关系可点击其中的链接跳转到官方github查看。打开项目的pubspec.yaml并将以下行添加到依赖项，执行package get： 12345678910// 支持Androidx的项目flutter_boost: git: url: 'https://github.com/alibaba/flutter_boost.git' ref: '1.12.13'// 使用support库的项目flutter_boost: git: url: 'https://github.com/alibaba/flutter_boost.git' ref: 'task/task_v1.12.13_support_hotfixes' 编辑完构建后会生成flutter_boost的Android Module，在app的build.gradle中添加依赖 1implementation project(':flutter_boost') 接下来在Android代码中集成，自定义Application实现FlutterBoost的初始化，别忘记在manifest中注册一下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768/** * Desc: * * @author Create by jiang&lt;a href=\"mailto:jiangyantaodev@163.com\"&gt;Contact me.&lt;/a&gt; on 2020/4/1 * &lt;p&gt; * Version: 1.0.0 */public class SimpleApp extends Application &#123; @Override public void onCreate() &#123; super.onCreate(); initFlutterBoostSDK(); &#125; private void initFlutterBoostSDK() &#123; INativeRouter router = new INativeRouter() &#123; @Override public void openContainer(Context context, String url, Map&lt;String, Object&gt; urlParams, int requestCode, Map&lt;String, Object&gt; exts) &#123; String assembleUrl = Utils.assembleUrl(url, urlParams); PageRouter.openPageByUrl(context, assembleUrl, urlParams); &#125; &#125;; FlutterBoost.BoostLifecycleListener boostLifecycleListener = new FlutterBoost.BoostLifecycleListener() &#123; @Override public void beforeCreateEngine() &#123; &#125; @Override public void onEngineCreated() &#123; &#125; @Override public void onPluginsRegistered() &#123; &#125; @Override public void onEngineDestroy() &#123; &#125; &#125;; // // AndroidManifest.xml 中必须要添加 flutterEmbedding 版本设置 // // &lt;meta-data android:name=\"flutterEmbedding\" // android:value=\"2\"&gt; // &lt;/meta-data&gt; // GeneratedPluginRegistrant 会自动生成 新的插件方式 // // 插件注册方式请使用 // FlutterBoost.instance().engineProvider().getPlugins().add(new FlutterPlugin()); // GeneratedPluginRegistrant.registerWith()，是在engine 创建后马上执行，放射形式调用 // Platform platform = new FlutterBoost .ConfigBuilder(this, router) .isDebug(true) .whenEngineStart(FlutterBoost.ConfigBuilder.ANY_ACTIVITY_CREATED) .renderMode(FlutterView.RenderMode.texture) .lifecycleListener(boostLifecycleListener) .build(); FlutterBoost.instance().init(platform); &#125;&#125; 关联的PageRouter代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/** * Desc: 咸鱼混合架构FlutterBoost页面路由 * * @author Create by jiang&lt;a href=\"mailto:jiangyantaodev@163.com\"&gt;Contact me.&lt;/a&gt; on 2020/4/1 * &lt;p&gt; * Version: 1.0.0 */public class PageRouter &#123; public final static Map&lt;String, String&gt; pageName = new HashMap&lt;String, String&gt;() &#123;&#123; put(\"first\", \"first\"); put(\"second\", \"second\"); put(\"tab\", \"tab\"); put(\"sample://flutterPage\", \"flutterPage\"); &#125;&#125;; public static final String NATIVE_PAGE_URL = \"sample://nativePage\"; public static final String FLUTTER_PAGE_URL = \"sample://flutterPage\"; public static final String FLUTTER_FRAGMENT_PAGE_URL = \"sample://flutterFragmentPage\"; public static boolean openPageByUrl(Context context, String url, Map params) &#123; return openPageByUrl(context, url, params, 0); &#125; public static boolean openPageByUrl(Context context, String url, Map params, int requestCode) &#123; String path = url.split(\"\\\\?\")[0]; Log.i(\"openPageByUrl\",path); try &#123; if (pageName.containsKey(path)) &#123; Intent intent = BoostFlutterActivity.withNewEngine().url(pageName.get(path)).params(params) .backgroundMode(BoostFlutterActivity.BackgroundMode.opaque).build(context); if(context instanceof Activity)&#123; Activity activity=(Activity)context; activity.startActivityForResult(intent,requestCode); &#125;else&#123; context.startActivity(intent); &#125; return true; &#125; else if (url.startsWith(FLUTTER_FRAGMENT_PAGE_URL)) &#123; context.startActivity(new Intent(context, FlutterFragmentPageActivity.class)); return true; &#125; else if (url.startsWith(NATIVE_PAGE_URL)) &#123; context.startActivity(new Intent(context, NativePageActivity.class)); return true; &#125; return false; &#125; catch (Throwable t) &#123; return false; &#125; &#125;&#125; 注意事项：因为FlutterBoost的框架中没有对BoostFlutterActivity在其manifest中注册，可能考虑到使用者会继承这个类吧，如果使用的是BoostFlutterActivity作为容器承载flutter页面需要在自己的manifest中注册这个类 在Activity中实现跳转flutter页面的代码： 12345678910111213141516171819/** * Called when a view has been clicked. * * @param v The view that was clicked. */@Overridepublic void onClick(View v) &#123; Map&lt;String, String&gt; params = new HashMap&lt;&gt;(); params.put(\"test1\", \"v_test1\"); params.put(\"test2\", \"v_test2\"); //Add some params if needed. if (v == mOpenNative) &#123; PageRouter.openPageByUrl(this, PageRouter.NATIVE_PAGE_URL, params); &#125; else if (v == mOpenFlutter) &#123; PageRouter.openPageByUrl(this, PageRouter.FLUTTER_PAGE_URL, params); &#125; else if (v == mOpenFlutterFragment) &#123; PageRouter.openPageByUrl(this, PageRouter.FLUTTER_FRAGMENT_PAGE_URL, params); &#125;&#125; 编辑flutter项目注册flutter_boost完成通道的畅通，编辑main.dart内容如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import 'package:flutter/material.dart';import 'package:flutter_boost/flutter_boost.dart';import 'FirstWidget.dart';void main() =&gt; runApp(MyApp());class MyApp extends StatefulWidget &#123; @override _MyAppState createState() =&gt; _MyAppState();&#125;class _MyAppState extends State&lt;MyApp&gt; &#123; @override void initState() &#123; super.initState(); // 将FirstWidget页面注册到FlutterBoost中。 FlutterBoost.singleton.registerPageBuilders(&#123; 'first': (pageName, params, _) =&gt; FirstWidget(), 'second': (pageName, params, _) =&gt; FirstWidget(), 'tab': (pageName, params, _) =&gt; FirstWidget(),// 'flutterFragment': (pageName, params, _) =&gt; FragmentRouteWidget(params), ///可以在native层通过 getContainerParams 来传递参数 'flutterPage': (pageName, params, _) &#123; print(\"flutterPage params:$params\"); return FirstWidget(); &#125;, &#125;); &#125; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return MaterialApp( title: 'Flutter Boost Demo', builder: FlutterBoost.init(postPush: _onRoutePushed), theme: ThemeData( // This is the theme of your application. // // Try running your application with \"flutter run\". You'll see the // application has a blue toolbar. Then, without quitting the app, try // changing the primarySwatch below to Colors.green and then invoke // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\", // or press Run &gt; Flutter Hot Reload in a Flutter IDE). Notice that the // counter didn't reset back to zero; the application is not restarted. primarySwatch: Colors.blue, ),// home: MyHomePage(title: 'Flutter Demo Home Page'), home: Container() ); &#125; void _onRoutePushed(String pageName, String uniqueId, Map params, Route route, Future _)&#123; &#125;&#125; 关联的FirstWidget代码如下：123456789101112131415161718192021222324252627282930313233343536373839import 'package:flutter/material.dart';import 'package:flutter_boost/flutter_boost.dart';class FirstWidget extends StatefulWidget &#123; @override _FirstWidgetState createState() =&gt; _FirstWidgetState();&#125;class _FirstWidgetState extends State&lt;FirstWidget&gt; &#123; @override Widget build(BuildContext context) &#123; return MaterialApp( title: 'Flutter Page', theme: ThemeData( primarySwatch: Colors.blue, ), home: new Scaffold( appBar: new AppBar( title: new Text(\"FlutterBoost Demo FirstWidget\"), ), body: new GestureDetector( child: RaisedButton( child: Text('Flutter Open Native Page'), onPressed: goNativePage), ), ), ); &#125; void goNativePage() &#123; print(\"open natve page!\"); ///后面的参数会在native的IPlatform.startActivity方法回调中拼接到url的query部分。 ///例如：sample://nativePage?aaa=bbb FlutterBoost.singleton .open(\"sample://nativePage\", urlParams: &lt;dynamic, dynamic&gt;&#123; \"query\": &#123;\"aaa\": \"bbb\"&#125; &#125;); &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://www.code4a.com/categories/Android/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.code4a.com/tags/Flutter/"}]},{"title":"Docker常用命令","slug":"Docker常用命令","date":"2020-03-27T09:37:34.000Z","updated":"2020-03-27T09:38:22.829Z","comments":false,"path":"2020/03/27/Docker常用命令/","link":"","permalink":"http://www.code4a.com/2020/03/27/Docker常用命令/","excerpt":"","text":"1. 查询本地已有镜像docker images 2. 查看本地所有容器docker ps -a 3. 启动镜像，并获取一个伪终端注意：实际启动的是容器，启动镜像时会自动创建新容器并启动。12sudo docker run -it &lt;REPOSITORY:TAG&gt; /bin/bash //使用 仓库名+标签 启动`sudo docker run -it &lt;IMAGE ID&gt; /bin/bash //使用 IMAGE ID 启动 4. 退出镜像1&gt;&gt; exit //或使用快捷键 Ctrl + D 说明： 这里使用 &gt;&gt;符号，表示命令在docker的伪终端中执行。 5. 启动容器12sudo docker start &lt;CONTAINER ID&gt; //使用 CONTAINER ID 启动sudo docker exec -it &lt;CONTAINER ID&gt; // 链接到容器，并获取一个伪终端 6. 退出容器12sudo docker stop &lt;CONTAINER ID&gt; //停止sudo docker kill &lt;CONTAINER ID&gt; //杀死运行的容器","categories":[{"name":"Docker","slug":"Docker","permalink":"http://www.code4a.com/categories/Docker/"}],"tags":[{"name":"Tools","slug":"Tools","permalink":"http://www.code4a.com/tags/Tools/"}]},{"title":"Android投屏工具Scrcpy常用命令","slug":"Android投屏工具Scrcpy常用命令","date":"2020-03-27T09:33:38.000Z","updated":"2020-03-27T09:34:52.864Z","comments":false,"path":"2020/03/27/Android投屏工具Scrcpy常用命令/","link":"","permalink":"http://www.code4a.com/2020/03/27/Android投屏工具Scrcpy常用命令/","excerpt":"","text":"Android无需Root的跨平台投屏工具-ScrcpyMac OS 可直接通过Homebrew安装12brew install scrcpy // 安装brew upgrade scrcpy // 升级 常用命令1234567891011scrcpy // 启动scrcpy -s a117** // 多个设备时指定 adb devices -l 显示的序列号scrcpy -p 20927 // 设置端口scrcpy --help // 查看帮助scrcpy -b 8M //设置码率 默认8Mscrcpy -m 1024 //限制投屏尺寸scrcpy -c 800:800:0:0 // 裁剪投屏屏幕 (长:宽:偏移x:偏移y)scrcpy -r file.mp4 // 投屏并录屏scrcpy -Nr file.mp4 //不投屏只录屏scrcpy -t // 手指触摸的时候显示轨迹球scrcpy -v // 显示版本信息 快捷键 Action Shortcut 切换全屏 Ctrl + f 将窗口调整为1:1（完美像素） Ctrl + g 调整窗口大小以删除黑色边框 `Ctrl + x 双击黑色背景` 设备HOME键 `Ctrl + h 鼠标中键` 设备BACK键 `Ctrl + b 鼠标右键` 设备任务管理键 Ctrl + s 设备菜单键 Ctrl + m 设备音量+键 Ctrl + ↑ 设备音量-键 Ctrl + ↓ 设备电源键 Ctrl + p 点亮手机屏幕 鼠标右键 复制内容到设备 Ctrl + v 启用/禁用FPS计数器(stdout) Ctrl + i 安装APK将apk文件拖入屏幕，如果为传输文件到设备，直接拖拽非apk的文件到屏幕","categories":[{"name":"Android","slug":"Android","permalink":"http://www.code4a.com/categories/Android/"}],"tags":[{"name":"Tools","slug":"Tools","permalink":"http://www.code4a.com/tags/Tools/"}]},{"title":"AbstractProcessor：利用注解动态生成代码","slug":"AbstractProcessor：利用注解动态生成代码","date":"2020-03-27T09:17:51.000Z","updated":"2020-03-27T09:21:30.145Z","comments":false,"path":"2020/03/27/AbstractProcessor：利用注解动态生成代码/","link":"","permalink":"http://www.code4a.com/2020/03/27/AbstractProcessor：利用注解动态生成代码/","excerpt":"","text":"按照处理时期，注解分为两种类型，一种是运行时注解，另一种是编译时注解。 编译时注解的核心依赖APT(Annotation Processing Tools)实现，对应的处理流程为： 在某些代码元素上（如类型、函数、字段等）添加注解； 编译时编译器会检查AbstractProcessor的子类，然后将添加了注解的所有元素都传递到该类的process函数中； 使得开发人员可以在编译器进行相应的处理。例如，使用注解生成新的Java类，这也就是EventBus、Retrofit、Dragger等开源库的基本原理。 1. 创建Java Library Java API已经提供了扫描源码并解析注解的框架，我们只需继承AbstractProcessor类来实现解析注解相关的逻辑。 创建Java Library sim-annotation，自动生成的 build.gradle内容如下： 123456789apply plugin: 'java-library'dependencies &#123; implementation fileTree(dir: 'libs', include: ['*.jar'])&#125;// 解决兼容性的问题sourceCompatibility = \"7\"targetCompatibility = \"7\" 创建一个注解类： 123456789101112131415161718192021222324252627282930313233343536373839404142package com.code4a.sim.annotation;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;/** * Desc: 注解示例代码 * * @author Create by jiang&lt;a href=\"mailto:jiangyantaodev@163.com\"&gt;Contact me.&lt;/a&gt; on 2020/3/26 * &lt;p&gt; * Version: 1.0.0 */// 元素类型为字段@Target(&#123;ElementType.FIELD&#125;)// 编译时注解@Retention(RetentionPolicy.CLASS)public @interface Sima &#123; /** * 标记参数名称或者服务名称 * * @return 名称，默认为空 */ String name() default \"\"; /** * 如果必须，当值为null时会导致app崩溃，此时默认值为false * 原始类型不会被检查 * * @return 是否必须，默认为否 */ boolean required() default false; /** * 字段描述 * * @return 描述，默认为空 */ String desc() default \"\";&#125; 创建Java Library sim-compiler，自动生成 build.gradle并添加依赖sim-annotation内容如下： 1234567891011121314151617apply plugin: 'java-library'dependencies &#123; implementation fileTree(dir: 'libs', include: ['*.jar']) implementation project(path: ':sim-annotation') // AutoService注解处理器是Google开发的，用来生成 META-INF/services/javax.annotation.processing.Processor 文件的， // 你只需要在你定义的注解处理器上添加 @AutoService(Processor.class) 就可以了 implementation 'com.google.auto.service:auto-service:1.0-rc6' // 在Gradle Wrapper 5.0将忽略compile classpath中的annotation processor，需要手动添加到annotation processor path annotationProcessor 'com.google.auto.service:auto-service:1.0-rc6' // 可以高效的生成java代码，替代StringBuilder方案 implementation 'com.squareup:javapoet:1.12.1'&#125;sourceCompatibility = \"7\"targetCompatibility = \"7\" 首先创建一个注解器基类： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293package com.code4a.sim.compiler.processor;import com.code4a.sim.compiler.utils.Consts;import com.code4a.sim.compiler.utils.Logger;import com.code4a.sim.compiler.utils.MapUtils;import com.code4a.sim.compiler.utils.StringUtils;import com.code4a.sim.compiler.utils.TypeUtils;import java.util.HashSet;import java.util.Map;import java.util.Set;import javax.annotation.processing.AbstractProcessor;import javax.annotation.processing.Filer;import javax.annotation.processing.ProcessingEnvironment;import javax.lang.model.SourceVersion;import javax.lang.model.util.Elements;import javax.lang.model.util.Types;/** * Desc: 注解处理器基类，汇总一些公共方法和操作 * &lt;p/&gt;每一个注解处理器类都必须有一个空的构造函数。 * * @author Create by jiang&lt;a href=\"mailto:jiangyantaodev@163.com\"&gt;Contact me.&lt;/a&gt; on 2020/3/26 * &lt;p&gt; * Version: 1.0.0 */public abstract class BaseProcessor extends AbstractProcessor &#123; Filer mFiler; Logger logger; Types types; Elements elementUtils; TypeUtils typeUtils; // Module name, maybe its 'app' or others String moduleName = null; // If need generate sim doc boolean generateDoc; /** * 每个注解处理器类都有一个特殊的init()方法，他会被注解处理工具调用，并传入&#123;@link ProcessingEnvironment&#125;参数. * ProcessingEnvironment提供很多有用的工具类&#123;@link javax.lang.model.util.Elements&#125;、&#123;@link javax.lang.model.util.Types&#125;、&#123;@link javax.annotation.processing.Filer&#125; * * @param processingEnv */ @Override public synchronized void init(ProcessingEnvironment processingEnv) &#123; super.init(processingEnv); // 获取ProcessingEnvironment提供的工具类 mFiler = processingEnv.getFiler(); types = processingEnv.getTypeUtils(); elementUtils = processingEnv.getElementUtils(); typeUtils = new TypeUtils(types, elementUtils); logger = new Logger(processingEnv.getMessager()); // Attempt to get user configuration [moduleName] Map&lt;String, String&gt; options = processingEnv.getOptions(); if (MapUtils.isNotEmpty(options)) &#123; moduleName = options.get(Consts.KEY_MODULE_NAME); generateDoc = Consts.VALUE_ENABLE.equals(options.get(Consts.KEY_GENERATE_DOC_NAME)); &#125; if (StringUtils.isNotEmpty(moduleName)) &#123; moduleName = moduleName.replaceAll(\"[^0-9a-zA-Z_]+\", \"\"); logger.info(\"The user has configuration the module name, it was [\" + moduleName + \"]\"); &#125; else &#123; logger.error(Consts.NO_MODULE_NAME_TIPS); throw new RuntimeException(\"Sim::Compiler &gt;&gt;&gt; No module name, for more information, look at gradle log.\"); &#125; &#125; /** * 用来指定你使用的Java版本。通常这里返回SourceVersion.latestSupported()。 * @return java 最新支持版本 */ @Override public SourceVersion getSupportedSourceVersion() &#123; return SourceVersion.latestSupported(); &#125; /** * 获取支持的配置 * @return 支持的配置字段 */ @Override public Set&lt;String&gt; getSupportedOptions() &#123; return new HashSet&lt;String&gt;() &#123;&#123; this.add(Consts.KEY_MODULE_NAME); this.add(Consts.KEY_GENERATE_DOC_NAME); &#125;&#125;; &#125;&#125; 创建com.code4a.sim.annotation.Sima注解对应的注解处理器package com.code4a.sim.compiler.processor;import com.code4a.sim.annotation.Sima;import com.code4a.sim.compiler.utils.CollectionUtils;import com.code4a.sim.compiler.utils.Consts;import com.code4a.sim.compiler.utils.MapUtils;import com.google.auto.service.AutoService;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Set;import javax.annotation.processing.ProcessingEnvironment;import javax.annotation.processing.Processor;import javax.annotation.processing.RoundEnvironment;import javax.annotation.processing.SupportedAnnotationTypes;import javax.lang.model.element.Element;import javax.lang.model.element.Modifier;import javax.lang.model.element.TypeElement;/** * Desc: Processor used to create sima helper * &lt;p&gt;SupportedAnnotationTypes指定该注解处理器可以解决的类型，需要完整的包名+类命&lt;/p&gt; * * @author Create by jiang&lt;a href=\"mailto:jiangyantaodev@163.com\"&gt;Contact me.&lt;/a&gt; on 2020/3/26 * &lt;p&gt; * Version: 1.0.0 */// AutoService用来生成 META-INF/services/javax.annotation.processing.Processor 文件@AutoService(Processor.class)@SupportedAnnotationTypes(&#123;Consts.ANNOTATION_TYPE_SIMA&#125;)public class SimaProcessor extends BaseProcessor &#123; // Contain field need sima and his super class. private Map&lt;TypeElement, List&lt;Element&gt;&gt; parentAndChild = new HashMap&lt;&gt;(); @Override public synchronized void init(ProcessingEnvironment processingEnv) &#123; super.init(processingEnv); logger.info(\"&gt;&gt;&gt; SimaProcessor init. &lt;&lt;&lt;\"); &#125; /** * 注解处理器入口类。 * &lt;p&gt;在这里写你的扫描、评估和处理注解的代码，以及生成Java文件&lt;/p&gt; * &#123;@inheritDoc&#125; * * @param annotations 需要处理的注释类型 * @param roundEnv 可以查询出包含特定注解的被注解元素 * @return 该注解处理器是否声明一组注释类型。 * 如果返回 true，则这些注解已声明并且不要求后续 Processor 处理它们； * 如果返回 false，则这些注解未声明并且可能要求后续 Processor 处理它们 */ @Override public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123; if (CollectionUtils.isNotEmpty(annotations)) &#123; try &#123; logger.info(\"&gt;&gt;&gt; Found Sima field, start... &lt;&lt;&lt;\"); // 获取所有被注解了@Sima的元素列表，并进行筛选分类 categories(roundEnv.getElementsAnnotatedWith(Sima.class)); generateHelper(); &#125; catch (Exception e) &#123; logger.error(e); &#125; return true; &#125; return false; &#125; /** * 生成java代码帮助方法 */ private void generateHelper() &#123; // 模版类接口 TypeElement type_ISyringe = elementUtils.getTypeElement(Consts.ISYRINGE); TypeElement type_JsonService = elementUtils.getTypeElement(Consts.JSON_SERVICE); TypeMirror iProvider = elementUtils.getTypeElement(Consts.IPROVIDER).asType(); TypeMirror activityTm = elementUtils.getTypeElement(Consts.ACTIVITY).asType(); TypeMirror fragmentTm = elementUtils.getTypeElement(Consts.FRAGMENT).asType(); TypeMirror fragmentTmV4 = elementUtils.getTypeElement(Consts.FRAGMENT_V4).asType(); // 构建Object类型的公共参数target ParameterSpec objectParamSpec = ParameterSpec.builder(TypeName.OBJECT, \"target\").build(); if (MapUtils.isNotEmpty(parentAndChild)) &#123; for (Map.Entry&lt;TypeElement, List&lt;Element&gt;&gt; entry : parentAndChild.entrySet()) &#123; // 构建inject方法 MethodSpec.Builder injectMethodBuilder = MethodSpec.methodBuilder(Consts.METHOD_INJECT) .addAnnotation(Override.class) .addModifiers(Modifier.PUBLIC) .addParameter(objectParamSpec); TypeElement parent = entry.getKey(); List&lt;Element&gt; childs = entry.getValue(); // 返回此类型元素的完全限定名称。更准确地说，返回规范 名称。 // 对于没有规范名称的局部类和匿名类，返回一个空名称。此处拿到的是全类名。 String qualifiedName = parent.getQualifiedName().toString(); String packageName = qualifiedName.substring(0, qualifiedName.lastIndexOf(\".\")); String fileName = parent.getSimpleName() + Consts.NAME_OF_SIMA; // logger.info(\"&gt;&gt;&gt; qualifiedName \" + qualifiedName + \" packageName \" + packageName + \" fileName \" + fileName + \" ... &lt;&lt;&lt;\"); logger.info(\"&gt;&gt;&gt; Start process \" + childs.size() + \" field in \" + parent.getSimpleName() + \" ... &lt;&lt;&lt;\"); // 构建类 TypeSpec.Builder helper = TypeSpec.classBuilder(fileName) .addJavadoc(Consts.WARNING_TIPS) .addSuperinterface(ClassName.get(type_ISyringe)) .addModifiers(Modifier.PUBLIC); // 构建字段 FieldSpec jsonServiceField = FieldSpec.builder(TypeName.get(type_JsonService.asType()), \"serializationService\", Modifier.PRIVATE).build(); helper.addField(jsonServiceField); injectMethodBuilder.addStatement(\"serializationService = $T.getInstance().navigation($T.class)\", SimClass, ClassName.get(type_JsonService)); injectMethodBuilder.addStatement(\"$T substitute = ($T)target\", ClassName.get(parent), ClassName.get(parent)); // 在inject方法中构建方法体 for (Element element : childs) &#123; Sima fieldConfig = element.getAnnotation(Sima.class); String fieldName = element.getSimpleName().toString(); if (types.isSubtype(element.asType(), iProvider)) &#123; // It's provider &#125; else &#123; // It's normal intent value String originalValue = \"substitute.\" + fieldName; String statement = \"substitute.\" + fieldName + \" = \" + buildCastCode(element) + \"substitute.\"; boolean isActivity = false; if (types.isSubtype(parent.asType(), activityTm)) &#123; // Activity, then use getIntent() isActivity = true; statement += \"getIntent().\"; &#125;else if (types.isSubtype(parent.asType(), fragmentTm) || types.isSubtype(parent.asType(), fragmentTmV4)) &#123; // Fragment, then use getArguments() statement += \"getArguments().\"; &#125; else &#123; throw new IllegalAccessException(\"The field [\" + fieldName + \"] need autowired from intent, its parent must be activity or fragment!\"); &#125; statement = buildStatement(originalValue, statement, typeUtils.typeExchange(element), isActivity); if (statement.startsWith(\"serializationService.\")) &#123; // Not mortals injectMethodBuilder.beginControlFlow(\"if (null != serializationService)\"); injectMethodBuilder.addStatement( \"substitute.\" + fieldName + \" = \" + statement, (StringUtils.isEmpty(fieldConfig.name()) ? fieldName : fieldConfig.name()), ClassName.get(element.asType()) ); injectMethodBuilder.nextControlFlow(\"else\"); injectMethodBuilder.addStatement( \"$T.e(\\\"\" + Consts.TAG + \"\\\", \\\"You want automatic inject the field '\" + fieldName + \"' in class '$T' , then you should implement 'SerializationService' to support object auto inject!\\\")\", AndroidLog, ClassName.get(parent)); injectMethodBuilder.endControlFlow(); &#125; else &#123; injectMethodBuilder.addStatement(statement, StringUtils.isEmpty(fieldConfig.name()) ? fieldName : fieldConfig.name()); &#125; &#125; &#125; helper.addMethod(injectMethodBuilder.build()); // Generate autowire helper JavaFile.builder(packageName, helper.build()).build().writeTo(mFiler); logger.info(\"&gt;&gt;&gt; \" + parent.getSimpleName() + \" has been processed, \" + fileName + \" has been generated. &lt;&lt;&lt;\"); &#125; logger.info(\"&gt;&gt;&gt; Sima processor stop. &lt;&lt;&lt;\"); &#125; &#125; private String buildStatement(String originalValue, String statement, int type, boolean isActivity) &#123; switch (TypeKind.values()[type]) &#123; case BOOLEAN: statement += (isActivity ? (\"getBooleanExtra($S, \" + originalValue + \")\") : (\"getBoolean($S)\")); break; case BYTE: statement += (isActivity ? (\"getByteExtra($S, \" + originalValue + \")\") : (\"getByte($S)\")); break; case SHORT: statement += (isActivity ? (\"getShortExtra($S, \" + originalValue + \")\") : (\"getShort($S)\")); break; case INT: statement += (isActivity ? (\"getIntExtra($S, \" + originalValue + \")\") : (\"getInt($S)\")); break; case LONG: statement += (isActivity ? (\"getLongExtra($S, \" + originalValue + \")\") : (\"getLong($S)\")); break; case CHAR: statement += (isActivity ? (\"getCharExtra($S, \" + originalValue + \")\") : (\"getChar($S)\")); break; case FLOAT: statement += (isActivity ? (\"getFloatExtra($S, \" + originalValue + \")\") : (\"getFloat($S)\")); break; case DOUBLE: statement += (isActivity ? (\"getDoubleExtra($S, \" + originalValue + \")\") : (\"getDouble($S)\")); break; case STRING: statement += (isActivity ? (\"getExtras() == null ? \" + originalValue + \" : substitute.getIntent().getExtras().getString($S, \" + originalValue + \")\") : (\"getString($S)\")); break; case SERIALIZABLE: statement += (isActivity ? (\"getSerializableExtra($S)\") : (\"getSerializable($S)\")); break; case PARCELABLE: statement += (isActivity ? (\"getParcelableExtra($S)\") : (\"getParcelable($S)\")); break; case OBJECT: statement = \"serializationService.parseObject(substitute.\" + (isActivity ? \"getIntent().\" : \"getArguments().\") + (isActivity ? \"getStringExtra($S)\" : \"getString($S)\") + \", new \" + Consts.TYPE_WRAPPER + \"&lt;$T&gt;()&#123;&#125;.getType())\"; break; &#125; return statement; &#125; private String buildCastCode(Element element) &#123; if (typeUtils.typeExchange(element) == TypeKind.SERIALIZABLE.ordinal()) &#123; return CodeBlock.builder().add(\"($T) \", ClassName.get(element.asType())).build().toString(); &#125; return \"\"; &#125; /** * 根据父元素类型，进行元素字段筛选分类 * * @param elements 有注解的元素集合 */ private void categories(Set&lt;? extends Element&gt; elements) throws IllegalAccessException &#123; if (CollectionUtils.isNotEmpty(elements)) &#123; for (Element element : elements) &#123; // 返回封装此元素的最里层元素，如果此元素的声明在词法上直接封装在另一个元素的声明中，则返回那个封装元素； // 如果此元素是顶层类型，则返回它的包如果此元素是一个包，则返回 null； 如果此元素是一个泛型参数，则返回 null. TypeElement enclosingElement = (TypeElement) element.getEnclosingElement(); // 检查被注解的元素是否被私有化 if (element.getModifiers().contains(Modifier.PRIVATE)) &#123; throw new IllegalAccessException(\"The inject fields CAN NOT BE 'private'!!! please check field [\" + element.getSimpleName() + \"] in class [\" + enclosingElement.getQualifiedName() + \"]\"); &#125; if (parentAndChild.containsKey(enclosingElement)) &#123; // Has categries parentAndChild.get(enclosingElement).add(element); &#125; else &#123; List&lt;Element&gt; childs = new ArrayList&lt;&gt;(); childs.add(element); parentAndChild.put(enclosingElement, childs); &#125; &#125; logger.info(\"categories finished.\"); &#125; &#125;&#125; 在Android应用中引用注解 首先在应用级别的build.gradle中添加依赖 12annotationProcessor project(path: ':sim-compiler')implementation project(path: ':sim-annotation') 然后可在Acitivty中的字段上添加@Sima注解 运行代码后可在Build Output中查看注解相关类中打印的log12345注: Sim::Compiler The user has configuration the module name, it was [app]注: Sim::Compiler &gt;&gt;&gt; SimaProcessor init. &lt;&lt;&lt;注: Sim::Compiler &gt;&gt;&gt; Found Sima field, start... &lt;&lt;&lt;注: Sim::Compiler categories finished.注: Sim::Compiler &gt;&gt;&gt; Start process 1 field in MainActivity ... &lt;&lt;&lt; 注：javapoet是用来生成java代码","categories":[{"name":"Android","slug":"Android","permalink":"http://www.code4a.com/categories/Android/"}],"tags":[{"name":"Annomation","slug":"Annomation","permalink":"http://www.code4a.com/tags/Annomation/"}]},{"title":"Modbus通信协议功能码","slug":"modbus-function-code","date":"2018-07-18T01:25:24.000Z","updated":"2018-07-18T01:55:50.152Z","comments":false,"path":"2018/07/18/modbus-function-code/","link":"","permalink":"http://www.code4a.com/2018/07/18/modbus-function-code/","excerpt":"","text":"Modbus功能代码对应名称及作用 功能码 名称 作用 1 读取线圈状态 取得一组逻辑线圈的当前状态（ON/OFF) 2 读取输入状态 取得一组开关输入的当前状态（ON/OFF) 3 读取保持寄存器 在一个或多个保持寄存器中取得当前的二进制值 4 读取输入寄存器 在一个或多个输入寄存器中取得当前的二进制值 5 强置单线圈 强置一个逻辑线圈的通断状态 6 预置单寄存器 把具体二进值装入一个保持寄存器 7 读取异常状态 取得8个内部线圈的通断状态，这8个线圈的地址由控制器决定 8 回送诊断校验 把诊断校验报文送从机，以对通信处理进行评鉴 9 编程（只用于484） 使主机模拟编程器作用，修改PC从机逻辑 10 控询（只用于484） 可使主机与一台正在执行长程序任务从机通信，探询该从机是否已完成其操作任务，仅在含有功能码9的报文发送后，本功能码才发送 11 读取事件计数 可使主机发出单询问，并随即判定操作是否成功，尤其是该命令或其他应答产生通信错误时 12 读取通信事件记录 可使主机检索每台从机的ModBus事务处理通信事件记录。如果某项事务处理完成，记录会给出有关错误 13 编程 (184/384 484 584) 可使主机模拟编程器功能修改PC从机逻辑 14 探询 (184/384 484 584) 可使主机与正在执行任务的从机通信，定期控询该从机是否已完成其程序操作，仅在含有功能13的报文发送后，本功能码才得发送 15 强置多线圈 强置一串连续逻辑线圈的通断 16 预置多寄存器 把具体的二进制值装入一串连续的保持寄存器 17 报告从机标识 可使主机判断编址从机的类型及该从机运行指示灯的状态 18 (884和MICRO 84) 可使主机模拟编程功能，修改PC状态逻辑 19 重置通信链路 发生非可修改错误后，使从机复位于已知状态，可重置顺序字节 20 读取通用参数(584L) 读取拓展存储器文件中的数据信息 21 写入通用参数(584L) 把通用参数写入扩展存储文件，或修改 链接Modbus通信协议功能码","categories":[{"name":"Modbus","slug":"Modbus","permalink":"http://www.code4a.com/categories/Modbus/"}],"tags":[{"name":"Modbus","slug":"Modbus","permalink":"http://www.code4a.com/tags/Modbus/"}]},{"title":"Mac下git多用户管理配置","slug":"Mac下git多用户管理配置","date":"2018-06-05T01:20:47.000Z","updated":"2018-06-09T02:56:21.920Z","comments":false,"path":"2018/06/05/Mac下git多用户管理配置/","link":"","permalink":"http://www.code4a.com/2018/06/05/Mac下git多用户管理配置/","excerpt":"","text":"Mac下git多用户管理配置，并且配置Android Studio正确引用git全局账户邮箱清理，如果没有配置可以忽略这一步123456git config --global --unset user.name \"username\"git config --global --unset user.email \"email address\"git config --global user.name#全局配置账户已经移除git config --global user.email#全局配置邮箱已经移除 进入对应的代码仓库配置对应的用户名和邮箱1234567891011// github 配置cd github-repository/git config user.name githubAccountgit config user.email githubEmail// 修改后查看配置git config user.name#githubAccountgit config user.email#githubEmail// gitlab 配置同上 生成邮箱对应的公钥和私钥1234567// 生成github对应的公钥和私钥ssh-keygen -t rsa -C \"github对应的邮箱\"Enter file in which to save the key (/Users/Accout(你的用户名)/.ssh/id_rsa): id_rsa_github// 生成gitlab对应的公钥和私钥ssh-keygen -t rsa -C \"gitlab对应的邮箱\"Enter file in which to save the key (/Users/Accout(你的用户名)/.ssh/id_rsa): id_rsa_gitlab 拷贝对应的公钥内容到对应平台的ssh key1234567// github ssh key 配置cat .ssh/id_rsa_github.pub // 复制内容settings -&gt; SSH and GPG keys -&gt; New SSH key// gitlab ssh key 配置cat .ssh/id_rsa_gitlab.pub // 复制内容profile settings -&gt; SSH keys -&gt; Add SSH Key 在.ssh根目录创建cinfig文件，添加内容123456789101112131415cd .sshvim config# github email addressHost githubHostName github.comUser git // 尝试只有用户名为git时才能测试通过PreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa_github# gitlab email addressHost gitlabHostName git.corp.company.cn // 你公司的gitlab地址User gitPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa_gitlab ssh-add -K 私钥名1234ssh-add -D // 删除所有密钥，请根据自己的情况执行命令ssh-add -K id_rsa_github //存储密钥到钥匙串ssh-add -K id_rsa_gitlabssh-add -L // 查看所有公钥参数 -l 查看所有公钥指纹 解决Mac重启之后ssh-add失效的问题Mac 重启后自动 ssh-add 私钥Mac OS Sierra SSH密钥在重启后丢失的问题 如果还是没有解决该问题，可以自己编写shell脚本，添加到开机启动项当中123456789vim .ssh/add_key.sh#! /bin/bash# 添加github 公钥ssh-add ~/.ssh/id_rsa_github# 添加gitlab 公钥ssh-add ~/.ssh/id_rsa_gitlab// 保存退出后，赋予sh文件可运行权限chmod +x .ssh/add_key.sh 选择sh打开方式为命令行工具(iTerm/终端)添加sh文件到开机启动项 系统偏好设置&gt;用户与群组&gt;登录项&gt;+ 如果需要可勾选隐藏项 ssh -vT git@域名 检测1234567// 测试github是否配置成功ssh -T github // github 是 Host 的值，此处可以替换为自己的Hi username! You've successfully authenticated, but GitHub does not provide shell access.// 测试gitlab是否配置成功ssh -T gitlab // 同上Welcome to GitLab, username! 以上如果不通的话，可以通过ssh -vT Host查看log信息 as中配置git 选择相同版本， ssh选择native 此处如果使用android studio的话需要在设置中进行指定使用的git版本和git配置，因为android stuido会读取自己的配置信息 修改android stuido的配置 1234// 修改路径Preferences -&gt; Version Control -&gt; Git // 匹配Path to Git executable路径和你命令行的git路径一致// 修改SSH executable 为Native","categories":[{"name":"tools","slug":"tools","permalink":"http://www.code4a.com/categories/tools/"}],"tags":[{"name":"Tools","slug":"Tools","permalink":"http://www.code4a.com/tags/Tools/"}]},{"title":"React Native 问题记录","slug":"react-native-record","date":"2018-04-18T01:59:05.000Z","updated":"2018-04-18T02:45:40.970Z","comments":false,"path":"2018/04/18/react-native-record/","link":"","permalink":"http://www.code4a.com/2018/04/18/react-native-record/","excerpt":"","text":"React Native开发笔记 详细的环境配置和文档说明请查看 React Native中文文档 命令行连接设备12adb devices // 查看当前是否连接设备且只能有一个设备adb reverse tcp:8081 tcp:8081 测试安装项目123react-native init ProjectNamecd ProjectNamereact-native run-android // 如果是ios 请用react-native run-ios 文档中的电影示例存在的问题1TypeError: 'undefined' is not an object (evaluating 'movie.posters.thumbnail') 问题待分析","categories":[{"name":"React Native","slug":"React-Native","permalink":"http://www.code4a.com/categories/React-Native/"}],"tags":[{"name":"React Native","slug":"React-Native","permalink":"http://www.code4a.com/tags/React-Native/"}]},{"title":"mac环境下使用nvm管理node版本","slug":"node-npm-update","date":"2018-03-14T01:55:58.000Z","updated":"2018-03-14T09:41:08.933Z","comments":false,"path":"2018/03/14/node-npm-update/","link":"","permalink":"http://www.code4a.com/2018/03/14/node-npm-update/","excerpt":"","text":"Mac环境下安装node时遇到的问题汇总通过brew安装nvm成功后，在zsh命令行输入nvm提示命令找不到 此时需要添加如下配置到.zshrc 12export NVM_DIR=\"/Users/username/.nvm\"source $(brew --prefix nvm)/nvm.sh 注意：在安装完成nvm后命令行自动提示的追加内容，会导致nvm安装nodejs后不生效的问题，此问题时zsh的一个bug 通过命令nvm install (nodeversion)安装完成之后，需要通过如下命令使用 12nvm use (version)nvm alias default (version)","categories":[{"name":"Tools","slug":"Tools","permalink":"http://www.code4a.com/categories/Tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://www.code4a.com/tags/tools/"}]},{"title":"百度DuerOS Android平台接入流程","slug":"dueros-android-import","date":"2018-01-31T09:00:23.000Z","updated":"2018-02-01T12:02:43.684Z","comments":false,"path":"2018/01/31/dueros-android-import/","link":"","permalink":"http://www.code4a.com/2018/01/31/dueros-android-import/","excerpt":"","text":"百度DuerOS接入让App更加智能 DuerOS开放平台是为企业及开发者提供的一整套对话式人工智能解决方案的开放平台 百度DuerOS开发平台官网地址 平台分为技能开放平台和智能设备开放平台具体的功能区别以及应用场景可查看网站介绍 注册成为开发者 如何你有百度账号，则使用百度账号进行登录，如何没有账号，则需要先注册百度账号 进行开发者认证开发者认证分为个人和企业开发者，需要的材料按照网页所需提供，审核材料需要经过两个工作日，审核通过就可以管理技能和设备两个控制台。 技能平台 创建新技能 技能平台，包含自定义技能，智能家居技能，内容播报技能 管理技能 可以在自己创建的技能上进行编辑/删除/查看技能ID 编辑技能 编辑技能页面可以查看技能的基础信息/交互模型/配置服务/模拟测试/发布上线/版本管理/技能数据功能，其中交互模型需要自己创建意图，定义字典，还可对其进行训练。 交互模型的使用可以查看官方教程进行学习DST多轮对话 设备平台(以下以Android设备为例) 配置新设备 场景选择为手机点击下一步 操作系统选择为Android点击下一步 此时需要填写设备名称，点击申请ClientID，用于后续SDK接入鉴权使用。 端能力配置，可用于屏幕展示，语音输入输出的配置。点击下一步 云服务配置，可分为BOT配置，聊天人物肖像的配置，可以将语音机器人进行丰富。语音唤醒服务，自定义控制命令，此时需要提供三个dic文件，用于自定义命令的识别和识别后云平台指令的下发。 SDK下载 SDK接入 SDK的配置可以参考DCS SDK（Java）开发者指南 接入SDK添加自定义功能。 首先配置自己设备的云服务自定义控制命令，上传三个dic文件(intent.dic/dict.dic/command.dic)进行审核，需要五个工作日左右。 intent.dic意图文件将用户的语音命令上传到云平台之后拆分进行意图匹配下发命令 ai.dueros.device_interface.thirdparty.cmcc.smart_gateway Add [D:add][device][type][W:0-2] ai.dueros.device_interface.thirdparty.cmcc.smart_gateway Remove [D:remove][device][type][W:0-2] ai.dueros.device_interface.thirdparty.cmcc.smart_gateway Bind [D:bind][gateway][W:0-2] ai.dueros.device_interface.thirdparty.cmcc.smart_gateway UnBind [D:unbind][gateway][W:0-2] dict.dic词典文件将平台上用户的语音进行分解，解析出用户想要做出的指令 [D:add] 添加 增加 [D:remove] 删除 移除 [D:bind] 绑定 [D:unbind] 解绑 [D:device] 温湿度 水浸 红外人感 门磁 燃气 可燃气体 烟雾感应 声光 [D:gateway] 普通网关 [D:type] 传感器 感应器 command.dic用户语言库，用来存储用户可能想要说出的完成控制命令语句 添加烟雾感应感应器 修改SDK添加自定义的DeviceModule ApiConstants.java用来匹配自定义的控制命令意图，将用户的话拆分成控制关键词和命令语句 public class ApiConstants { public static final String NAMESPACE = &quot;ai.dueros.device_interface.thirdparty.cmcc.smart_gateway&quot;; public static final String NAME = &quot;SmartGatewayInterface&quot;; public static final class Events { } public static final class Directives { public static final class Add { public static final String NAME = Add.class.getSimpleName(); } public static final class Remove { public static final String NAME = Remove.class.getSimpleName(); } public static final class Bind { public static final String NAME = Bind.class.getSimpleName(); } public static final class UnBind { public static final String NAME = UnBind.class.getSimpleName(); } } } *Payload.java用来接收用户的命令，这两个类需要在framework.message包下的PayloadConfig.java中进行插入，用来解析下发的payload json数据 SmartGatewayDeviceModule.java用来解析命令，并分发下去。 最后在framework包下的DeviceModuleFactory.java中创建添加我们的Module即可。 具体示例可以查看百度Dueros平台Demo","categories":[{"name":"android","slug":"android","permalink":"http://www.code4a.com/categories/android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://www.code4a.com/tags/Android/"}]},{"title":"自建服务器证书","slug":"creat-server-certificate","date":"2017-12-26T08:41:22.000Z","updated":"2018-03-22T09:50:35.801Z","comments":false,"path":"2017/12/26/creat-server-certificate/","link":"","permalink":"http://www.code4a.com/2017/12/26/creat-server-certificate/","excerpt":"","text":"生成CA根证书此处假设你已经安装好了openssl环境变量，如果没有可以百度一下如何配置。 创建key，通过如下命令生成跟证书cert_name.key 1openssl genrsa -des3 -out /your_cert_dir/cert_name.key 2048 //des3 是加密算法，你也可以选择你认为安全的算法 私钥 test_root 此时输入的秘钥需要记录，后续自签是需要使用 生成CA证书及根证书，并对其进行自签，使用如下命令生成自签证书crt_name.crt 1openssl req -new -x509 -key /your_cert_dir/cert_name.key -out /yout_cert_dir/crt_name.crt -days 36500 //x509是一种加密标准，-out是指输出路径，-key是指定私钥，也就是上一步生成的那个，-days是指证书的有效期。 * 此时输入前面的cert_name私钥 test_root * 输入country cn * 时区或者省份 beijing * 市 bj * 公司company chinamobile * 部门 terminal * commone name 可以指定自己的名字或者别称，但是不能用服务器的名字 code4a * email jiangyantaodev@163.com 生成服务端证书 创建server端的私钥 1openssl genrsa -des3 -out /your_key_dir/test_server.key 2048 私匙 ser_test_root 创建server证书签名请求 (如果需要改ip，则需要从这一步开始设置) 1openssl req -new -key /your_key_dir/test_server.key -out /your_key_dir/test_server.csr 输入私匙 ser_test_root 输入country cn 时区或者省份 beijing 市 bj 公司company chinamobile 部门 terminal 注意：这里的common name,此处填写你的服务器的ip或者域名，例如localhost，也就是你要为哪台服务器做证书就指定那台机器。localhost 或者填写远程服务器ip，如： 123211.136.90.87192.168.1.179211.136.90.53 email jiangyantaodev@163.com the following extra attributes to be sent with your certificate requesta challenge password ：（挑战密码可以和私匙不一样）123456 optional company name 可选公司名 code4a root CA签署server证书 如果是第一次通过CA签署证书的话，执行如下命令把test_server.crt 通过自签证书crt_name.crt 的认证 1openssl x509 -req -days 36500 -in /your_key_dir/test_server.csr -CA /your_key_dir/crt_name.crt -CAkey /your_cert_dir/cert_name.key -CAcreateserial -out /your_cert_dir/test_server.crt 创建server端的pkcs12文件 1openssl pkcs12 -export -in /your_cert_dir/test_server.crt -inkey /your_key_dir/test_server.key -out /your_key_dir/test_server.p12 -name 0927_code4a_caserver_100year 注意：其中的-name 0927_code4a_caserver_100year，这个是指定keystore的别名，记下来，很重要哦（weblogic要用到） 输入服务器端私匙 ser_test_root 输入扩展（导出）密码 123456 确认密码 123456 转换pkcs12为JKS keystore文件 这个过程需要用到jetty.jar，下载相应jar后添加到classpath，然后执行如下命令 1java org.mortbay.util.PKCS12Import /your_key_dir/test_server.p12 /your_key_dir/test_server.jks 如果环境变量没有配置好，执行上面语句报错，可以执行本段代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.InputStreamReader;import java.io.LineNumberReader;import java.io.OutputStream;import java.security.Key;import java.security.KeyStore;import java.security.cert.Certificate;import java.security.cert.X509Certificate;import java.util.Enumeration;public class MyPKCS12Import &#123; @SuppressWarnings(\"unchecked\") public static void main(String[] args) throws Exception &#123; //主要修改这里，改成自己刚才生成的.p12文件 File fileIn = new File(\"/your_key_dir/test_server.p12\"); //主要修改这里，改成自己要输出的位置 File fileOut = new File(\"/your_key_dir/test_server.jks\"); if (!(fileIn.canRead())) &#123; System.err.println(\"Unable to access input keystore: \" + fileIn.getPath()); System.exit(2); &#125; if ((fileOut.exists()) &amp;&amp; (!(fileOut.canWrite()))) &#123; System.err.println(\"Output file is not writable: \" + fileOut.getPath()); System.exit(2); &#125; KeyStore kspkcs12 = KeyStore.getInstance(\"pkcs12\"); KeyStore ksjks = KeyStore.getInstance(\"jks\"); LineNumberReader in = new LineNumberReader(new InputStreamReader( System.in)); System.out.print(\"Enter input keystore passphrase: \"); char[] inphrase = in.readLine().toCharArray(); System.out.print(\"Enter output keystore passphrase: \"); char[] outphrase = in.readLine().toCharArray(); kspkcs12.load(new FileInputStream(fileIn), inphrase); ksjks.load((fileOut.exists()) ? new FileInputStream(fileOut) : null, outphrase); Enumeration eAliases = kspkcs12.aliases(); int n = 0; while (eAliases.hasMoreElements()) &#123; String strAlias = (String) eAliases.nextElement(); System.err.println(\"Alias \" + (n++) + \": \" + strAlias); if (kspkcs12.isKeyEntry(strAlias)) &#123; System.err.println(\"Adding key for alias \" + strAlias); Key key = kspkcs12.getKey(strAlias, inphrase); Certificate[] chain = kspkcs12.getCertificateChain(strAlias); ksjks.setKeyEntry(strAlias, key, outphrase, chain); &#125; &#125; OutputStream out = new FileOutputStream(fileOut); ksjks.store(out, outphrase); out.close(); &#125; static void dumpChain(Certificate[] chain) &#123; for (int i = 0; i &lt; chain.length; ++i) &#123; Certificate cert = chain[i]; if (cert instanceof X509Certificate) &#123; X509Certificate x509 = (X509Certificate) chain[i]; System.err.println(\"subject: \" + x509.getSubjectDN()); System.err.println(\"issuer: \" + x509.getIssuerDN()); &#125; &#125; &#125; &#125; * 代码运行时，让输入 1234Enter input keystore passphrase //第4步输入的导出密码123456Enter output keystore passphrase:123456 * 最后输出 12345Alias 0: caserver_10yearAdding key for alias caserver_10yearAlias 0: remote_caserver_10yearAdding key for alias remote_caserver_10year","categories":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://www.code4a.com/categories/JavaWeb/"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://www.code4a.com/tags/JavaWeb/"}]},{"title":"Sublime Text Install Package Control","slug":"sublime-text-install-package-control","date":"2017-11-22T04:47:31.000Z","updated":"2018-01-31T10:29:05.201Z","comments":false,"path":"2017/11/22/sublime-text-install-package-control/","link":"","permalink":"http://www.code4a.com/2017/11/22/sublime-text-install-package-control/","excerpt":"","text":"Sublime Text 安装Package Control输入如下命令 1import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read()) 提示如下错误 1Error loading /Users/xxx/Library/Application Support/Sublime Text 3/Installed Packages/Package Control.sublime-package: File is not a zip file 此时需要参考Package Control输入最新的安装命令即可解决该问题 Sublime Text3 1import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) Sublime Text2 1import urllib2,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')","categories":[{"name":"Tools","slug":"Tools","permalink":"http://www.code4a.com/categories/Tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://www.code4a.com/tags/tools/"}]},{"title":"Vim常用命令记录","slug":"Vim-Command-Used-Record","date":"2017-11-04T02:24:24.000Z","updated":"2017-11-04T05:01:28.708Z","comments":false,"path":"2017/11/04/Vim-Command-Used-Record/","link":"","permalink":"http://www.code4a.com/2017/11/04/Vim-Command-Used-Record/","excerpt":"","text":"Vim常用命令 一直在使用Vim编辑文件但是也只是略懂皮毛，只会使用一些简单地命令，操作编辑文件。为了熟练的使用Vim，在使用Vim编辑这篇文章的同时，也进行一些命令的练习和记录，方便以后更加高效的编辑文件。 vi编辑器支持编辑模式和命令模式，编辑模式下可以完成文本的编辑功能，命令模式下可以完成对文件的操作命令，要正确使用vi编辑器就必须熟练掌握两种模式的切换。默认情况下，打开vi编辑器后自动进入命令模式。从编辑模式切换到命令模式使用esc键，从命令模式切换到编辑模式使用A,a,O,o,I,i键。 命令模式下 游标操作 按键 操作 h 游标向左移动 j 游标向下移动 k 游标向上移动 l 游标向右移动 w 向前移动一个单词 b 向后移动一个单词 e 向前移动一个单词，且游标指向单词的末尾 ( 移动当前句子的首部 ) 移动下一个句子的首部 { 移动当前段的首部 } 移动下一段的首部 [[ 移到当前区段的首部 ]] 移到下一个区段的首部 0 移到当前行的首部 $ 移到当前行的尾部 ^ 移到当前行第一个非空白字符的地方 + or RETURN 移动到下一行的第一个字符 - 移动到上一行的第一个字符 /text 向下搜索text ?text 向上搜索text 切换编辑模式 按键 操作 A 当前行的尾部追加内容 i 游标前插入内容 I 游标后插入内容 o 在鼠标所在行的下面添加内容 O 在鼠标所在行的上面添加内容 cw 删除游标所在的字符，然后进入编辑模式 cc 删除游标所在的行，然后进入编辑模式 C 删除从游标所在的位置到行尾的字符，然后进入编辑模式 内容编辑 按键 操作 dd 删除当前行 ndd 删除第n行 D 删除当前行游标所在的位置后面的字符 d} 删除当前段剩余的字符 d^ 删除游标前到行首的字符 dL 删除从游标到屏幕的最后一行之间的内容 dG 删除从游标到文件末尾之间的内容 u 撤销最后的改变 U 还原当前行的内容 x 向后删除游标所在位置的字符 X 向前删除游标前面的字符 nX 删除前面的n个字符，游标所在的字符将不会被删 . 还原最后的改变 文件操作 按键 操作 :w 写文件 :w! 写文件，忽略警告信息 :w! file 覆盖文件，忽略警告信息 :wq 写文件之后退出编辑 :q 退出编辑器 :q! 强制退出编辑器 :w file 把文件的内容写到另一个文件 ZZ 退出编辑器，如果文件有改动，则保存再退出 :x 退出编辑器，如果文件有改动，则保存再退出 :n1,n2w file 把n1行到n2行间的内容写到文件file :n1,n2w &gt;&gt; file 把n1行到n2行间的内容追加到文件file :e file2 在当前文件的命令行模式下编辑file2 :e! 重新从磁盘加载文件 :e# 交替编辑文件 :n 编辑地下一行 :n! 编辑地下一行（忽略警告） :r file 在游标后面插入文件 :r !command 在当前行的后面，插入运行命令后的输出内容 :set number 最左端显示行号 :set nonumber 最左端隐藏行号 编辑模式 该模式下就是文件的常规编写，输入任意字符进行编辑 切换命令模式 按键 操作 esc 切换为命令模式 上述命令可进行命令模式下的文件操作致谢vi命令常用vi编辑器命令行","categories":[{"name":"Tools","slug":"Tools","permalink":"http://www.code4a.com/categories/Tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://www.code4a.com/tags/tools/"}]},{"title":"iTerm2语法高亮配置","slug":"iTerm2-Command-highlighter","date":"2017-11-04T02:00:58.000Z","updated":"2017-11-04T02:18:29.024Z","comments":false,"path":"2017/11/04/iTerm2-Command-highlighter/","link":"","permalink":"http://www.code4a.com/2017/11/04/iTerm2-Command-highlighter/","excerpt":"","text":"iTerm2 语法高亮假如你没有配置过iTerm2可以参考Mac 下 iTerm2的安装及配置完成其安装和配置 安装完iTerm2发现之前配置过得命令都找不到了，像brew,npm等命令，此时只需要更新一下.bash_profile文件即可 123456// 打开配置文件sudo vi .bash_profile// 添加如下路径，保存退出export PATH=/usr/local/bin:$PATH// 更新配置source ~/.bash_profile 语法高亮配置 使用homebrew安装 zsh-syntax-highlighting 插件。 1brew install zsh-syntax-highlighting 配置.zshrc文件，插入一行。 1source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 更新配置 1source ~/.zshrc","categories":[{"name":"Tools","slug":"Tools","permalink":"http://www.code4a.com/categories/Tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://www.code4a.com/tags/tools/"}]},{"title":"zsh: command not found: gradle/adb/..","slug":"zsh-command-not-found-cmd","date":"2017-11-02T12:17:31.000Z","updated":"2017-11-04T02:02:36.179Z","comments":false,"path":"2017/11/02/zsh-command-not-found-cmd/","link":"","permalink":"http://www.code4a.com/2017/11/02/zsh-command-not-found-cmd/","excerpt":"","text":"iTerm2下命令找不到 由于前段时间更新了命令行工具，导致这两天在Android Studio的命令行下找不到adb命令和gradle命令。因为Android Studio的命令行使用的就是默认的命令行工具，导致之前对bash的配置不生效。 如果你出现同样的问题可以参考Mac下command not found:gradle/adb终极解决方案这篇文章，可以很好地解决这个问题！zsh: permission denied: ./gradlew在使用命令gradlew提交代码到jCenter时出现zsh: permission denied: ./gradlew，第一反应是权限不够，然后再前边添加了sudo命令提高权限，紧接着又出现sudo: ./gradlew: command not found的提示，然后再网上搜索了一下原来是gradlew没有执行权限，因为之前在Terminal终端工具中是经常用的命令，换了iTerm2之后就忘记了是否之前添加过执行权限，真是好记性不如烂笔头，何况我这记性还不好。记录一下这种情况以及所需命令1sudo chmod +x gradlew 为gradlew增加可执行权限发布代码到jCenter然后再执行发布到jCenter的命令，如果你也是使用的bintray-release的配置，可以使用以下命令。1./gradlew clean build bintrayUpload -PbintrayUser=BINTRAY_USERNAME -PbintrayKey=BINTRAY_KEY -PdryRun=false","categories":[{"name":"Tools","slug":"Tools","permalink":"http://www.code4a.com/categories/Tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://www.code4a.com/tags/tools/"}]},{"title":"Centos7系统安装配置","slug":"centos7-install-config","date":"2017-10-27T09:58:21.000Z","updated":"2017-10-27T10:55:41.243Z","comments":false,"path":"2017/10/27/centos7-install-config/","link":"","permalink":"http://www.code4a.com/2017/10/27/centos7-install-config/","excerpt":"","text":"Centos 7 Mini安装配置过程 由于工作的需要，出差到外地，需要部署局域网的服务器环境，方便这边环境的测试，安装过程也是几经波折，最终还是将环境部署成功，然后记录一下安装的过程。避免以后安装踩到一些未知的坑。 Centos7 镜像下载 请前往Centos官网的下载页面选择DVD ISO按钮，在我的Mac环境下就是直接启动了迅雷进行下载了，如果没有会进入到二级界面，此时请选择相应的镜像地址进行下载系统镜像 制作U盘启动盘 U盘启动盘制作可以参考这里。 镜像也不需要拷贝到U盘里。我制作的时候有一步不太一样就是在写入之前，点击了便捷启动 引导选择 linux 的字样，然后选择写入。后边和链接里类似。 U盘引导进入安装Centos 7 如果你安装之前这台主机已经预装了windows系统，需用通过硬盘工具将整个磁盘删除，我当时是用另外一个WinPE的U盘引导进入，通过磁盘工具删除整个盘符，方便在后续安装中Centos安装程序能够识别硬盘。如果你的盘符已经删除或者是Centos可以识别的类型可以忽略这一步。 进入Centos引导界面，具体的可以参考这个链接 的第二步 安装配置Centos 7 具体的安装配置过程可以参考CentOS 7.0系统安装配置步骤详解 为了big够大，选择安装的都是命令行的系统，命令行大神可以忽略后边的废话。为了配置方便此时需要在自己的个人笔记本上安装XShell工具进行远程连接，进行环境部署，环境部署的过程中可以需要网Centos上拷贝文件，此时还需要安装XFtp工具进行文件的拷贝。后续的数据库操作也需要在电脑上安装数据库操作的客户端Navicat。在数据库远程登录的过程中，如果出现 2003 # 10060 的错误时，可能就是Centos的防火墙未允许远程连接，此时需要修改防火墙配置文件，具体可参考远程连接linux下的mysql Err1045 Err2003解决办法。以上推荐的链接都是在安装过程中搜索大量帖子之后筛选的最终解决问题的链接。以上链接可能符合个人的操作习惯，或者能解决某些问题。希望能有帮助。","categories":[{"name":"Tools","slug":"Tools","permalink":"http://www.code4a.com/categories/Tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://www.code4a.com/tags/tools/"}]},{"title":"Mac 下 iTerm2的安装及配置","slug":"iTerm2-install-configuration","date":"2017-10-24T05:43:46.000Z","updated":"2017-10-24T06:28:03.620Z","comments":false,"path":"2017/10/24/iTerm2-install-configuration/","link":"","permalink":"http://www.code4a.com/2017/10/24/iTerm2-install-configuration/","excerpt":"","text":"Mac下安装iTerm2以及配色方案 工欲善其事，必先利其器 在好友博客中看到了一个终端工具iTerm2的使用及配色方案，感觉这个工具程序呈现的外观看着很舒服，所以自己也参照他的方案进行了配置，然后在网上搜索到这个工具同时也可以修改Vim的配色，所以就想流程记录了一下，方便日后再次部署是查看。 iTerm2安装和配色参考效果图： 具体步骤可参考audiebantzhan的这篇博文可以解决在安装过程中遇到的问题。 iTerm2 Vim配色参考效果图： 在第一步中配置工具颜色的时候，会下载到最流行的配色解决方案Solarized，Vim 的配色最好和终端的配色保持一致，不然有可能会觉得很别扭，能接受的可以除外。具体流程如下： 1234$ cd solarized$ cd vim-colors-solarized/colors$ mkdir -p ~/.vim/colors$ cp solarized.vim ~/.vim/colors/ 然后需要编辑配置文件 1234$ vi ~/.vimrcsyntax enableset background=darkcolorscheme solarized 关闭重新打开Vim 就可以看到效果 致谢及内容出处iTerm2 ConfigurationMac vim iterm2配色方案","categories":[{"name":"Tools","slug":"Tools","permalink":"http://www.code4a.com/categories/Tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://www.code4a.com/tags/tools/"}]},{"title":"Beyond Compare for Mac 无限试用方法","slug":"beyond-compare-for-mac-install-free-use","date":"2017-10-23T04:37:44.000Z","updated":"2017-10-23T09:51:41.062Z","comments":false,"path":"2017/10/23/beyond-compare-for-mac-install-free-use/","link":"","permalink":"http://www.code4a.com/2017/10/23/beyond-compare-for-mac-install-free-use/","excerpt":"","text":"Beyond Compare For MacBeyond Compare 下载试用原理在Beyond Compare官网下载最新的 Beyond Compare解压后, 把 Beyond Compare 复制到应用程序中，选中图标，右键点击“显示包内容”，逐步进入 Beyond Compare 应用程序的 MacOS 目录下(/Applications/Beyond Compare.app/Contents/MacOS)原理：BCompare 是应用程序启动的程序. 只要在启动的时候删除 registry.dat (Library/Application Support/Beyond Compare/registry.dat)注册信息就好了.为此可以在该目录下添加一个批处理文件用来处理这个操作. 具体操作如下: 将主启动程序 BCompare 重命名为 BCompare.real 在同级目录下新建一个脚本文件,命名为 BCompare,这样 BCompare 在启动的时候就会执行该脚本文件,注意记得 chmod a+x BCompare 使用文本编辑工具(如：Sublime Text)新建一个文件，在里面写如下代码，第一行是注明解释器，第二行是删除注册信息，第三行是启动真正的主程序。 123#!/bin/bashrm \"/Users/$(whoami)/Library/Application Support/Beyond Compare/registry.dat\"\"`dirname \"$0\"`\"/BCompare.real $@ 然后保存文件到名称为BCompare.sh到Beyond Compare 应用程序的 MacOS 目录下(/Applications/Beyond Compare.app/Contents/MacOS) 重新打开该文件查看是否有多余内容，如果有删除掉，保存关闭软件，然后选中该文件Command + i显示文件简介，去掉.sh后缀 最后在终端使用 cd 命令进入 MacOS 目录，执行 chmod a+x BCompare 12cd /Applications/Beyond\\ Compare.app/Contents/MacOS/chmod a+x BCompare 这样我们每次打开软件的时候，都会先自动删掉注册信息，也就是永久免费试用了 参考致谢Seidea的Beyond Compare for Mac 无限试用方法","categories":[{"name":"Tools","slug":"Tools","permalink":"http://www.code4a.com/categories/Tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://www.code4a.com/tags/tools/"}]},{"title":"创建hexo新文章笔记","slug":"create-new-blog-method","date":"2017-10-23T02:50:55.000Z","updated":"2017-10-23T09:51:34.398Z","comments":true,"path":"2017/10/23/create-new-blog-method/","link":"","permalink":"http://www.code4a.com/2017/10/23/create-new-blog-method/","excerpt":"","text":"创建我的新文章 好记性不如烂笔头，好长时间不更新博客了，连更新的流程和方法都忘记了，所以时下记得很清楚的东西，还是要用文本记录下来，方便日后忘记再次查看！ 命令行进入到blog文件夹根目录1cd 自己的路径/blog/ 通过hexo命令创建新博文123hexo new \"博文名称\" /** 创建新的博文 **/// 或者hexo new post \"博文名称\" 编辑博文通过上边的代码会将新的博文创建在source/_posts/ 的文件夹下，然后进入到路径/blog/source/_posts目录下，找到刚刚创建的“博文名称.md”使用 markdown工具进行编辑博客内容。不知道markdow格式的可以参考Markdown语法说明对比书写自己的博文 编辑生成静态博客123hexo g// 或者hexo generate /** 生成一套静态网页 **/ 生成的博客内容就在当前路径的 public目录下 本地预览完整博客内容123hexo s// 或者hexo server /** 在本地建立 Server ，提供访问和浏览 **/ 浏览器访问地址 http://0.0.0.0:4000/ 上传到github可以通过github desktop提交变更到github仓库，等待一会编译通过，新的文章就更新进去了 也可以通过命令行进行提交。使用BCompare 对比两个目录的差异，进行更新然后通过命令行进行提交 123git add . // # 将所有修改过的工作文件提交暂存区git commit -m “the commit message\"git push origin master # 将本地主分支推到远程主分支 参考更多详细的配置内容可以参考以下链接Hexo在github上构建免费的Web应用使用 Hexo 生成一套静态博客网页","categories":[{"name":"hexo","slug":"hexo","permalink":"http://www.code4a.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.code4a.com/tags/hexo/"}]},{"title":"RxJava Study two","slug":"RxJava-Study-two","date":"2016-03-16T08:05:53.000Z","updated":"2017-10-23T09:50:31.688Z","comments":true,"path":"2016/03/16/RxJava-Study-two/","link":"","permalink":"http://www.code4a.com/2016/03/16/RxJava-Study-two/","excerpt":"","text":"","categories":[{"name":"RxJava","slug":"RxJava","permalink":"http://www.code4a.com/categories/RxJava/"}],"tags":[{"name":"RxJava","slug":"RxJava","permalink":"http://www.code4a.com/tags/RxJava/"}]},{"title":"使用NanoHTTPD在Android上建立本地服务器","slug":"NanoHTTPD-Simple-Use","date":"2016-03-11T10:22:51.000Z","updated":"2017-10-23T09:59:02.299Z","comments":true,"path":"2016/03/11/NanoHTTPD-Simple-Use/","link":"","permalink":"http://www.code4a.com/2016/03/11/NanoHTTPD-Simple-Use/","excerpt":"","text":"使用NanoHTTPD在Android上建立本地服务器 因为项目需求，需要在Android端的Service上实现一个简单的服务器，方便客户端发送Http请求，完成对应的自动化流程，通过查阅相关资料，最终决定采用NanoHTTPD NanoHTTPD项目地址 在 releases 界面下载nanohttpd-2.2.0.jar导入eclipse的工程中，因为目前的项目是迭代早期的项目，而且也并未往Android Studio上迁移，在AS上的依赖可以参考项目的 Readme 进行配置 使用起来非常的简单，服务端的代码实现如下： 1. 单独的类集成NanoHTTPDpackage com.cmcc.receiver.transfer; import java.util.HashMap; import java.util.Map; import java.util.Set; import android.os.Handler; import android.os.Message; import android.text.TextUtils; import android.util.Log; import com.cmcc.receiver.consts.Constants; import fi.iki.elonen.NanoHTTPD; public class WiMoTransferServer extends NanoHTTPD { public static final int DEFAULT_SERVER_PORT = 8080; public static final String TAG = WiMoTransferServer.class.getSimpleName(); private static final String NOTHING = &quot;/favicon.ico&quot;; // ip:8080/cmd=set_interent&amp;target_ssid=WiMO-xxxx&amp;password=12345678 // cmd=set_interent&amp;target_ssid=netgear54&amp;password=11111111 private static final String REQUEST_ROOT = &quot;/&quot;; private Handler mHander; public WiMoTransferServer(Handler mHandler) { super(DEFAULT_SERVER_PORT); this.mHander = mHandler; } @Override public Response serve(IHTTPSession session) { // TODO Auto-generated method stub Log.i(TAG, &quot;IHTTPSession : -&gt; &quot; + session.getMethod() + &quot; , uri : -&gt; &quot; + session.getUri()); Response response = super.serve(session); String uriStr = session.getUri(); switch (session.getMethod()) { case GET: if (NOTHING.equals(uriStr) || REQUEST_ROOT.equals(uriStr)) { Log.i(TAG, &quot;request url = &quot; + NOTHING); response = response404(session, uriStr); } else if (!TextUtils.isEmpty(uriStr) &amp;&amp; uriStr.contains(Constants.EQUAL)) { Map&lt;String, String&gt; paramsMap = parseURLRequest(uriStr); checkParamsResult(paramsMap); String cmdResult = paramsMap.get(Constants.CMD); Log.i(TAG, &quot; cmdResult -&gt; &quot; + cmdResult); if (!TextUtils.isEmpty(cmdResult) &amp;&amp; Constants.SETINTERNET.equals(cmdResult)) { String targetSSID = paramsMap.get(Constants.TARGETSSID); String pwd = paramsMap.get(Constants.PWD); Log.i(TAG, &quot;targetSSID = &quot; + targetSSID + &quot; ,password = &quot; + pwd); Message msg = mHander.obtainMessage(Constants.MSG_CONNECT_TARGET_AP); msg.obj = targetSSID + Constants.SPLIT + pwd; mHander.sendMessage(msg); } response = responseSuccess(); } // default: // Log.i(TAG, &quot;request method is not GET&quot;); // response = response404(session, uriStr); // break; } return response; } public void checkParamsResult(Map&lt;String, String&gt; paramsMap) { Set&lt;String&gt; keySet = paramsMap.keySet(); for (String key : keySet) { String value = paramsMap.get(key); Log.i(TAG, &quot;params_Key: -&gt; &quot; + key + &quot; ,params_Value: -&gt; &quot; + value); } } /** * 解析出url参数中的键值对 如 * &quot;ip:8080/cmd=set_interent&amp;target_ssid=WiMO-xxxx&amp;password=12345678&quot;， * 解析出cmd:set_interent,target_ssid:WiMO-xxxx,password:12345678存入map中 * * @param URL * url地址 * @return url请求参数部分 */ public Map&lt;String, String&gt; parseURLRequest(String URL) { Map&lt;String, String&gt; mapRequest = new HashMap&lt;String, String&gt;(); String[] arrSplit = null; String strUrlParam = truncateUrlPage(URL); if (strUrlParam == null) { return mapRequest; } // 每个键值为一组 arrSplit = strUrlParam.split(&quot;[&amp;]&quot;); for (String strSplit : arrSplit) { String[] arrSplitEqual = null; arrSplitEqual = strSplit.split(&quot;[=]&quot;); // 解析出键值 if (arrSplitEqual.length &gt; 1) { // 正确解析 mapRequest.put(arrSplitEqual[0], arrSplitEqual[1]); } else { if (arrSplitEqual[0] != &quot;&quot;) { // 只有参数没有值，不加入 mapRequest.put(arrSplitEqual[0], &quot;&quot;); } } } return mapRequest; } /** * 去掉url中的路径，留下请求参数部分 * * @param strURL * url地址 * @return url请求参数部分 */ public String truncateUrlPage(String strURL) { String strAllParam = null; String[] arrSplit = null; strURL = strURL.trim().toLowerCase(); if (strURL.contains(&quot;[?]&quot;)) { arrSplit = strURL.split(&quot;[?]&quot;); if (strURL.length() &gt; 1) { if (arrSplit.length &gt; 1) { if (arrSplit[1] != null) { strAllParam = arrSplit[1]; } } } } else if (strURL.startsWith(REQUEST_ROOT)) { strAllParam = strURL.substring(strURL.indexOf(REQUEST_ROOT) + 1); Log.i(TAG, &quot; strAllParam substring result : -&gt; &quot; + strAllParam); } else { strAllParam = strURL; } return strAllParam; } public Response responseSuccess() { StringBuilder builder = new StringBuilder(); builder.append(&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&quot;); builder.append(&quot;Success!&quot;); builder.append(&quot;&lt;/body&gt;&lt;/html&gt;\\n&quot;); return newFixedLengthResponse(builder.toString()); } public Response response404(IHTTPSession session, String url) { StringBuilder builder = new StringBuilder(); builder.append(&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&quot;); builder.append(&quot;Sorry, Can&apos;t Found &quot; + url + &quot; !&quot;); builder.append(&quot;&lt;/body&gt;&lt;/html&gt;\\n&quot;); return newFixedLengthResponse(builder.toString()); } } 2. 在service中初始化WiMoTransferServer对象private void initWebServer() { mWiMoTransferServer = new WiMoTransferServer(mHandler); try { mWiMoTransferServer.start(); } catch (IOException e) { e.printStackTrace(); } } 在需要初始化server的地方调用该方法，在需要停止服务的地方调用 mWiMoTransferServer.stop(); 3. 然后再客户端中通过http请求发送到该服务的ip地址，然后再做详细的处理和响应","categories":[{"name":"android","slug":"android","permalink":"http://www.code4a.com/categories/android/"}],"tags":[{"name":"NanoHTTPD-Android","slug":"NanoHTTPD-Android","permalink":"http://www.code4a.com/tags/NanoHTTPD-Android/"}]},{"title":"RxJava学习笔记(一)","slug":"RxJava-Study-first","date":"2016-03-10T15:31:02.000Z","updated":"2017-10-23T09:50:44.776Z","comments":true,"path":"2016/03/10/RxJava-Study-first/","link":"","permalink":"http://www.code4a.com/2016/03/10/RxJava-Study-first/","excerpt":"","text":"由于目前工作比较安逸，成了温水青蛙，长期以往的惰性，导致了好多新知识还停留在听过的阶段，作为一个软件工程师来说，这是致命的缺点.为了重拾原有的拼劲和热情，所以自己决定做出改变，就以当下比较流程的RxJava的学习去转变！丰富自己技能的同时，也养成坚持写博客的习惯！ RxJava项目地址 关于RxJava的简介和优点可以参考 RxJava 入门 1.准备工作 工欲善其事，必先利其器 a.首先打开Android Studio创建项目，然后根据RxJava的Readme中描述在AS中的使用方法 Example for Gradle: compile &apos;io.reactivex:rxjava:x.y.z&apos; b.然后再项目的Module的根目录build.gradle文件中添加项目依赖，查看Github中Release分支中看到的RxJava版本为1.1.1, 所以最终添加的内容 compile &apos;io.reactivex:rxjava:1.1.1&apos; 然后点击上边的出现的 Sync Now 等待依赖下载完成，即准备工作完成 2.牛刀小试 敲码百变，其义自现 a.Hello Wrold 先创建Observable rx.Observable&lt;String&gt; myObservable = rx.Observable.create( new rx.Observable.OnSubscribe&lt;String&gt;() { @Override public void call(rx.Subscriber&lt;? super String&gt; sub) { sub.onNext(&quot;Hello, world!&quot;); sub.onCompleted(); } } ); Observable发送“Hello,world!”消息然后完成。接着创建Subscriber来消费这个数据： rx.Subscriber&lt;String&gt; mySubscriber = new rx.Subscriber&lt;String&gt;() { @Override public void onNext(String s) { Log.i(TAG, &quot; s -&gt; &quot; + s); } @Override public void onCompleted() { Log.i(TAG, &quot; onCompleted() &quot;); } @Override public void onError(Throwable e) { } }; 上面代码所做的工作就是打印由Observable发送的字符串。现在我们有了myObservable和mySubscriber，就可以通过subscribe()函数把两者关联起来： myObservable.subscribe(mySubscriber); 当订阅完成，myObservable将调用subscriber的onNext()和onComplete()函数，最终mySubscriber打印“Hello, world!”然后终止。 03-10 11:55:42.784 4249-4249/com.code4a I/HiddenTitleActivity: s -&gt; Hello, world! 03-10 11:55:42.784 4249-4249/com.code4a I/HiddenTitleActivity: onCompleted()","categories":[{"name":"RxJava","slug":"RxJava","permalink":"http://www.code4a.com/categories/RxJava/"}],"tags":[{"name":"RxJava","slug":"RxJava","permalink":"http://www.code4a.com/tags/RxJava/"}]},{"title":"Better Java(一)","slug":"better-java","date":"2015-11-16T13:04:04.000Z","updated":"2017-10-23T10:49:06.894Z","comments":false,"path":"2015/11/16/better-java/","link":"","permalink":"http://www.code4a.com/2015/11/16/better-java/","excerpt":"","text":"教你编写现代化的java程式 Java是目前世界上最流行的编程语言之一，自从java8正式发布之后，原有的编程习惯方式发生了一些转变。 Style(样式) 传统而言，java是习惯以冗长的javaBean方式定义某个数据对象，新的样式可能会更清晰和保证准确性 Structs(结构体) 常规用法public class DataBean { private String data; public DataBean(){}; public void setData(String data){ this.data = data; } public String getData(){ return this.data; } } 不过这种方式是冗长并且浪费资源的，即便你的编辑器能自动生成这种代码。作为替代方法，可以参考C风格里的结构体样式去编写这种容器数据：public class DataBean { public final String data; public DataBean(String data) { this.data = data; } } 这种方式几乎可以使得代码行数减半，除此之外，这种类还是不可变得类，所以在某些情况下我们可以放心的使用它。如果你是希望用Map或者List这些结构体去存储对象而使得修改变得简单点，可以使用ImmuTableMap或者ImmuTableList。这个后边会讨论。 Builder模式 如果你的数据元结构比较复杂，那么你可以考虑如下Builder模式。Builder模式在数据类构造器中定义了一个子类，使用可变状态，不过一旦创建之后就会变得不可改变：public class ComplicatedDataBean { public final String data; public fianl int num; // lots more fields and a constructor private ComplicatedDataBean(Builder builder){ this.data = builder.data; this.num = builder.num; } public static class Builder { private String data; private int num; public Builder data(String data) { this.data = data; return this; } public Builder num(int num){ this.num = num; return this; } public ComplicatedDataBean build(){ return new ComplicatedDataBean(this); // etc } } } 然后可以按照如下方式使用：final ComplicatedDataBean cda = new ComplicatedDataBean.builder().data(&quot;她已经&quot;).num(22).build(); Dependency Injection(依赖注入) 依赖注入更多的从属于软件工程的范畴而并非java的范畴，但是去撰写可测试的软件的最好方式就是使用依赖注入。因为java强烈推荐OO的设计方式，为了使软件具有较好的可测试性，可以去使用依赖注入。 在java领域，最经典的DI框架当属Spring，它提供了基于代码的注入以及基于xml配置的注入方式。不过Spring确实有些繁琐，如果只是单纯的想使用依赖注入这个功能，可以选择使用Google 和 Square的Dagger库或者Google’s Guice. 避免空指针 尽可能的避免使用空指针。特别是在可能返回空的集合的情况下，务必返回一个内容为空的集合而不是null。如果使用的是java8，可以使用新的Optional类型来避免可能的空指针。public class FooWidget { private final String data; private final Optional&lt;Bar&gt; bar; public FooWidget(String data){ this(data, Optional.empty()); } public FooWidget(String data, Optional&lt;Bar&gt; bar){ this.data = data; this.bar = bar; } public Optional&lt;Bar&gt; getBar(){ return bar; } } 根据上述代码可知道，返回的数据肯定不会为null类型，不过bar不一定是present(存在)的final Optional&lt;FooWidget&gt; fooWidget = maybeGetFooWidget(); final Baz baz = fooWidget.flatMap(FooWidget::getBar).flatMap(BarWidget::getBaz).orElse(defaultBaz); ImmuTable-by-default(默认不可变) java-advantages-of-of-immutable-objects-in-examples 除非有特殊的原因，否则变量，类，集合应该默认设置为不可变。其中变量类型可以使用final关键字设置不可变：final FooWidget fooWidget; if(condition()){ fooWidget = getWidget(); }else{ try{ fooWidget = cachedFooWidget.get(); }catch(CachingException e){ throw e; } } Avoid lots of Util Classes(避免使用大量工具类) 一不注意，就会发现自己写了N多的工具类，譬如：public class MiscUtil { public static String frobnicateString(String base, int times){ // ... etc } } public interface Thrower { default void throwIfCondition(boolean condition, String msg) { // ... } } 这样每个需要使用这些接口的类可以方便的进行自定义 格式化 javaDoc 为你的代码添加javaDoc同样非常重要，可以参考这个示例：using examples Streams java 8 提供了非常nice的 stream api可以用如下的写法：final List&lt;String&gt; filtered = list.stream().filter(s-&gt;s.startsWith(&quot;s&quot;)).map(s-&gt;s.toUpperCase()).collect(Collectors.toList()); 来替代：final List&lt;String&gt; filtered = new ArrayList&lt;&gt;(); for (String str : list){ if(str.startsWith(&quot;s&quot;)){ filtered.add(str.toUpperCase()); } } 这样可以帮助你写更多的高可读性，流畅性的代码。 本文来自：SegmentFault 版权归属原作者","categories":[{"name":"java","slug":"java","permalink":"http://www.code4a.com/categories/java/"}],"tags":[{"name":"java编程思想","slug":"java编程思想","permalink":"http://www.code4a.com/tags/java编程思想/"}]},{"title":"WheelView Android","slug":"WheelView-Android","date":"2015-11-15T08:42:11.000Z","updated":"2017-10-23T09:58:49.068Z","comments":true,"path":"2015/11/15/WheelView-Android/","link":"","permalink":"http://www.code4a.com/2015/11/15/WheelView-Android/","excerpt":"","text":"Android 横向滚轮选择视图适用于为money 或者短词名称做选择器先上图，效果图： 使用方式布局xml： 注意在父布局加入xmlns:app=&quot;http://schemas.android.com/apk/res-auto“可使用自定义属性 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;LinearLayout xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;#fafafa&quot; android:orientation=&quot;vertical&quot; android:weightSum=&quot;2&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:orientation=&quot;vertical&quot;&gt; &lt;com.lantouzi.wheelview.WheelView android:id=&quot;@+id/wheelview&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;8dp&quot; android:background=&quot;@android:color/white&quot;/&gt; &lt;com.lantouzi.wheelview.WheelView android:id=&quot;@+id/wheelview2&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;8dp&quot; android:background=&quot;@android:color/white&quot; app:lwvHighlightColor=&quot;#7CD717&quot; app:lwvIntervalFactor=&quot;1.1&quot;/&gt; &lt;com.lantouzi.wheelview.WheelView android:id=&quot;@+id/wheelview3&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;8dp&quot; android:background=&quot;@android:color/white&quot; app:lwvHighlightColor=&quot;#31B1E6&quot; app:lwvIntervalFactor=&quot;1.3&quot; app:lwvMarkRatio=&quot;0.2&quot; app:lwvMarkTextColor=&quot;#919191&quot;/&gt; &lt;/LinearLayout&gt; &lt;com.lantouzi.wheelview.WheelView android:id=&quot;@+id/wheelview4&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;16dp&quot; android:background=&quot;#222222&quot; app:lwvAdditionalCenterMark=&quot;元&quot; app:lwvHighlightColor=&quot;#31B1E6&quot; app:lwvMarkColor=&quot;#EEEEEE&quot; app:lwvMarkTextColor=&quot;#CACACA&quot;/&gt; &lt;com.lantouzi.wheelview.WheelView android:id=&quot;@+id/wheelview5&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;16dp&quot; android:background=&quot;#222222&quot; app:lwvAdditionalCenterMark=&quot;元&quot; app:lwvCenterMarkTextSize=&quot;14sp&quot; app:lwvCursorSize=&quot;10dp&quot; app:lwvHighlightColor=&quot;#31B1E6&quot; app:lwvMarkColor=&quot;#EEEEEE&quot; app:lwvMarkTextColor=&quot;#CACACA&quot; app:lwvMarkTextSize=&quot;12sp&quot;/&gt; &lt;TextView android:id=&quot;@+id/selected_tv&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;8dp&quot; android:gravity=&quot;center&quot;/&gt; &lt;/LinearLayout&gt; &lt;/ScrollView&gt; Activity中实现: private WheelView mWheelView, mWheelView2, mWheelView3, mWheelView4, mWheelView5; private TextView mSelectedTv; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mWheelView = (WheelView) findViewById(R.id.wheelview); mWheelView2 = (WheelView) findViewById(R.id.wheelview2); mWheelView3 = (WheelView) findViewById(R.id.wheelview3); mWheelView4 = (WheelView) findViewById(R.id.wheelview4); mWheelView5 = (WheelView) findViewById(R.id.wheelview5); mSelectedTv = (TextView) findViewById(R.id.selected_tv); final List&lt;String&gt; items = new ArrayList&lt;&gt;(); for (int i = 1; i &lt;= 40; i++) { items.add(String.valueOf(i * 1000)); } mWheelView.setItems(items); mWheelView.selectIndex(8); mWheelView.setAdditionCenterMark(&quot;元&quot;); List&lt;String&gt; items2 = new ArrayList&lt;&gt;(); items2.add(&quot;一月&quot;); items2.add(&quot;二月&quot;); items2.add(&quot;三月&quot;); items2.add(&quot;四月&quot;); items2.add(&quot;五月&quot;); items2.add(&quot;六月&quot;); items2.add(&quot;七月&quot;); items2.add(&quot;八月&quot;); items2.add(&quot;九月&quot;); items2.add(&quot;十月&quot;); items2.add(&quot;十一月&quot;); items2.add(&quot;十二月&quot;); mWheelView2.setItems(items2); List&lt;String&gt; items3 = new ArrayList&lt;&gt;(); items3.add(&quot;1&quot;); items3.add(&quot;2&quot;); items3.add(&quot;3&quot;); items3.add(&quot;5&quot;); items3.add(&quot;7&quot;); items3.add(&quot;11&quot;); items3.add(&quot;13&quot;); items3.add(&quot;17&quot;); items3.add(&quot;19&quot;); items3.add(&quot;23&quot;); items3.add(&quot;29&quot;); items3.add(&quot;31&quot;); mWheelView3.setItems(items3); mWheelView3.setAdditionCenterMark(&quot;m&quot;); mWheelView4.setItems(items); mWheelView5.setItems(items); mWheelView5.setOnWheelItemSelectedListener(new WheelView.OnWheelItemSelectedListener() { @Override public void onWheelItemSelected(int position) { mSelectedTv.setText(&quot;选择：&quot; + items.get(position) + &quot;万&quot;); } }); } 引用的wheelviewattrs.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;resources&gt; &lt;declare-styleable name=&quot;WheelView&quot;&gt; &lt;attr name=&quot;lwvHighlightColor&quot; format=&quot;color|reference&quot;/&gt; &lt;attr name=&quot;lwvMarkColor&quot; format=&quot;color|reference&quot;/&gt; &lt;attr name=&quot;lwvMarkTextColor&quot; format=&quot;color|reference&quot;/&gt; &lt;attr name=&quot;lwvIntervalFactor&quot; format=&quot;float&quot;/&gt; &lt;attr name=&quot;lwvMarkRatio&quot; format=&quot;float&quot;/&gt; &lt;attr name=&quot;lwvCursorSize&quot; format=&quot;dimension&quot;/&gt; &lt;attr name=&quot;lwvMarkTextSize&quot; format=&quot;dimension&quot;/&gt; &lt;attr name=&quot;lwvCenterMarkTextSize&quot; format=&quot;dimension&quot;/&gt; &lt;attr name=&quot;lwvHighlightMarkTextSize&quot; format=&quot;dimension&quot;/&gt; &lt;attr name=&quot;lwvAdditionalCenterMark&quot; format=&quot;string|reference&quot;/&gt; &lt;/declare-styleable&gt; &lt;/resources&gt; 自定义视图WheelViewpackage com.lantouzi.wheelview; import android.content.Context; import android.content.res.TypedArray; import android.graphics.Canvas; import android.graphics.Paint; import android.graphics.Path; import android.graphics.Rect; import android.graphics.RectF; import android.os.Parcel; import android.os.Parcelable; import android.support.v4.view.GestureDetectorCompat; import android.support.v4.view.ViewCompat; import android.text.TextPaint; import android.text.TextUtils; import android.util.AttributeSet; import android.view.GestureDetector; import android.view.MotionEvent; import android.view.SoundEffectConstants; import android.view.View; import android.widget.OverScroller; import com.lantouzi.wheelview.library.R; import java.util.List; /** * Created by kyle on 15/11/9. */ public class WheelView extends View implements GestureDetector.OnGestureListener { public static final float DEFAULT_INTERVAL_FACTOR = 1.2f; public static final float DEFAULT_MARK_RATIO = 0.7f; private Paint mMarkPaint; private TextPaint mMarkTextPaint; private int mCenterIndex; private int mHighlightColor, mMarkTextColor; private int mMarkColor, mFadeMarkColor; private int mHeight; private List&lt;String&gt; mItems; private String mAdditionCenterMark; private OnWheelItemSelectedListener mOnWheelItemSelectedListener; private float mIntervalFactor = DEFAULT_INTERVAL_FACTOR; private float mMarkRatio = DEFAULT_MARK_RATIO; private int mMarkCount; private float mAdditionCenterMarkWidth; private Path mCenterIndicatorPath = new Path(); private float mCursorSize; private int mViewScopeSize; // scroll control args ---- start private OverScroller mScroller; private float mMaxOverScrollDistance; private RectF mContentRectF; private boolean mFling = false; private float mCenterTextSize, mNormalTextSize; private float mTopSpace, mBottomSpace; private float mIntervalDis; private float mCenterMarkWidth, mMarkWidth; private GestureDetectorCompat mGestureDetectorCompat; // scroll control args ---- end public WheelView(Context context) { super(context); init(null); } public WheelView(Context context, AttributeSet attrs) { super(context, attrs); init(attrs); } public WheelView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); init(attrs); } protected void init(AttributeSet attrs) { float density = getResources().getDisplayMetrics().density; mCenterMarkWidth = (int) (density * 1.5f + 0.5f); mMarkWidth = density; mHighlightColor = 0xFFF74C39; mMarkTextColor = 0xFF666666; mMarkColor = 0xFFEEEEEE; mCursorSize = density * 18; mCenterTextSize = density * 22; mNormalTextSize = density * 18; mBottomSpace = density * 6; TypedArray ta = attrs == null ? null : getContext().obtainStyledAttributes(attrs, R.styleable.WheelView); if (ta != null) { mHighlightColor = ta.getColor(R.styleable.WheelView_lwvHighlightColor, mHighlightColor); mMarkTextColor = ta.getColor(R.styleable.WheelView_lwvMarkTextColor, mMarkTextColor); mMarkColor = ta.getColor(R.styleable.WheelView_lwvMarkColor, mMarkColor); mIntervalFactor = ta.getFloat(R.styleable.WheelView_lwvIntervalFactor, mIntervalFactor); mMarkRatio = ta.getFloat(R.styleable.WheelView_lwvMarkRatio, mMarkRatio); mAdditionCenterMark = ta.getString(R.styleable.WheelView_lwvAdditionalCenterMark); mCenterTextSize = ta.getDimension(R.styleable.WheelView_lwvCenterMarkTextSize, mCenterTextSize); mNormalTextSize = ta.getDimension(R.styleable.WheelView_lwvMarkTextSize, mNormalTextSize); mCursorSize = ta.getDimension(R.styleable.WheelView_lwvCursorSize, mCursorSize); } mFadeMarkColor = mHighlightColor &amp; 0xAAFFFFFF; mIntervalFactor = Math.max(1, mIntervalFactor); mMarkRatio = Math.min(1, mMarkRatio); mTopSpace = mCursorSize + density * 2; mMarkPaint = new Paint(Paint.ANTI_ALIAS_FLAG); mMarkTextPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG); mMarkTextPaint.setTextAlign(Paint.Align.CENTER); mMarkTextPaint.setColor(mHighlightColor); mMarkPaint.setColor(mMarkColor); mMarkPaint.setStrokeWidth(mCenterMarkWidth); mMarkTextPaint.setTextSize(mCenterTextSize); calcIntervalDis(); mScroller = new OverScroller(getContext()); mContentRectF = new RectF(); mGestureDetectorCompat = new GestureDetectorCompat(getContext(), this); selectIndex(0); } /** * calculate interval distance between items */ private void calcIntervalDis() { if (mMarkTextPaint == null) { return; } String defaultText = &quot;888888&quot;; Rect temp = new Rect(); int max = 0; if (mItems != null &amp;&amp; mItems.size() &gt; 0) { for (String i : mItems) { mMarkTextPaint.getTextBounds(i, 0, i.length(), temp); if (temp.width() &gt; max) { max = temp.width(); } } } else { mMarkTextPaint.getTextBounds(defaultText, 0, defaultText.length(), temp); max = temp.width(); } if (!TextUtils.isEmpty(mAdditionCenterMark)) { mMarkTextPaint.setTextSize(mNormalTextSize); mMarkTextPaint.getTextBounds(mAdditionCenterMark, 0, mAdditionCenterMark.length(), temp); mAdditionCenterMarkWidth = temp.width(); max += temp.width(); } mIntervalDis = max * mIntervalFactor; } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension(measureWidth(widthMeasureSpec), measureHeight(heightMeasureSpec)); } private int measureWidth(int widthMeasureSpec) { int measureMode = MeasureSpec.getMode(widthMeasureSpec); int measureSize = MeasureSpec.getSize(widthMeasureSpec); int result = getSuggestedMinimumWidth(); switch (measureMode) { case MeasureSpec.AT_MOST: case MeasureSpec.EXACTLY: result = measureSize; break; default: break; } return result; } private int measureHeight(int heightMeasure) { int measureMode = MeasureSpec.getMode(heightMeasure); int measureSize = MeasureSpec.getSize(heightMeasure); int result = (int) (mBottomSpace + mTopSpace * 2 + mCenterTextSize); switch (measureMode) { case MeasureSpec.EXACTLY: result = Math.max(result, measureSize); break; case MeasureSpec.AT_MOST: result = Math.min(result, measureSize); break; default: break; } return result; } public void fling(int velocityX, int velocityY) { mScroller.fling(getScrollX(), getScrollY(), velocityX, velocityY, (int) -mMaxOverScrollDistance, (int) (mContentRectF.width() - mMaxOverScrollDistance), 0, 0, (int) mMaxOverScrollDistance, 0); ViewCompat.postInvalidateOnAnimation(this); } @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) { super.onSizeChanged(w, h, oldw, oldh); if (w != oldw || h != oldh) { mHeight = h; mMaxOverScrollDistance = w / 2.f; mContentRectF.set(0, 0, (mMarkCount - 1) * mIntervalDis, h); mViewScopeSize = (int) Math.ceil(mMaxOverScrollDistance / mIntervalDis); } } @Override protected void onDraw(Canvas canvas) { super.onDraw(canvas); mCenterIndicatorPath.reset(); float sizeDiv2 = mCursorSize / 2f; float sizeDiv3 = mCursorSize / 3f; mCenterIndicatorPath.moveTo(mMaxOverScrollDistance - sizeDiv2 + getScrollX(), 0); mCenterIndicatorPath.rLineTo(0, sizeDiv3); mCenterIndicatorPath.rLineTo(sizeDiv2, sizeDiv2); mCenterIndicatorPath.rLineTo(sizeDiv2, -sizeDiv2); mCenterIndicatorPath.rLineTo(0, -sizeDiv3); mCenterIndicatorPath.close(); mMarkPaint.setColor(mHighlightColor); canvas.drawPath(mCenterIndicatorPath, mMarkPaint); int start = mCenterIndex - mViewScopeSize; int end = mCenterIndex + mViewScopeSize + 1; start = Math.max(start, -mViewScopeSize * 2); end = Math.min(end, mMarkCount + mViewScopeSize * 2); // extends both ends if (mCenterIndex == mMarkCount - 1) { end += mViewScopeSize; } else if (mCenterIndex == 0) { start -= mViewScopeSize; } float x = start * mIntervalDis; float markHeight = mHeight - mBottomSpace - mCenterTextSize - mTopSpace; // small scale Y offset float smallMarkShrinkY = markHeight * (1 - mMarkRatio) / 2f; smallMarkShrinkY = Math.min((markHeight - mMarkWidth) / 2f, smallMarkShrinkY); for (int i = start; i &lt; end; i++) { float tempDis = mIntervalDis / 5f; // offset: Small mark offset Big mark for (int offset = -2; offset &lt; 3; offset++) { float ox = x + offset * tempDis; if (i &gt;= 0 &amp;&amp; i &lt;= mMarkCount &amp;&amp; mCenterIndex == i) { int tempOffset = Math.abs(offset); if (tempOffset == 0) { mMarkPaint.setColor(mHighlightColor); } else if (tempOffset == 1) { mMarkPaint.setColor(mFadeMarkColor); } else { mMarkPaint.setColor(mMarkColor); } } else { mMarkPaint.setColor(mMarkColor); } if (offset == 0) { // center mark mMarkPaint.setStrokeWidth(mCenterMarkWidth); canvas.drawLine(ox, mTopSpace, ox, mTopSpace + markHeight, mMarkPaint); } else { // other small mark mMarkPaint.setStrokeWidth(mMarkWidth); canvas.drawLine(ox, mTopSpace + smallMarkShrinkY, ox, mTopSpace + markHeight - smallMarkShrinkY, mMarkPaint); } } // mark text if (mMarkCount &gt; 0 &amp;&amp; i &gt;= 0 &amp;&amp; i &lt; mMarkCount) { CharSequence temp = mItems.get(i); if (mCenterIndex == i) { mMarkTextPaint.setColor(mHighlightColor); mMarkTextPaint.setTextSize(mCenterTextSize); if (!TextUtils.isEmpty(mAdditionCenterMark)) { float off = mAdditionCenterMarkWidth / 2f; float tsize = mMarkTextPaint.measureText(temp, 0, temp.length()); canvas.drawText(temp, 0, temp.length(), x - off, mHeight - mBottomSpace, mMarkTextPaint); mMarkTextPaint.setTextSize(mNormalTextSize); canvas.drawText(mAdditionCenterMark, x + tsize / 2f, mHeight - mBottomSpace, mMarkTextPaint); } else { canvas.drawText(temp, 0, temp.length(), x, mHeight - mBottomSpace, mMarkTextPaint); } } else { mMarkTextPaint.setColor(mMarkTextColor); mMarkTextPaint.setTextSize(mNormalTextSize); canvas.drawText(temp, 0, temp.length(), x, mHeight - mBottomSpace, mMarkTextPaint); } } x += mIntervalDis; } } @Override public boolean onTouchEvent(MotionEvent event) { if (mItems == null || mItems.size() == 0) { return false; } boolean ret = mGestureDetectorCompat.onTouchEvent(event); if (!mFling &amp;&amp; MotionEvent.ACTION_UP == event.getAction()) { if (getScrollX() &lt; -mMaxOverScrollDistance) { mScroller.startScroll(getScrollX(), 0, (int) -mMaxOverScrollDistance - getScrollX(), 0); invalidate(); ret = true; } else if (getScrollX() &gt; mContentRectF.width() - mMaxOverScrollDistance) { mScroller.startScroll(getScrollX(), 0, (int) (mContentRectF.width() - mMaxOverScrollDistance) - getScrollX(), 0); invalidate(); ret = true; } else { autoSettle(); ret = true; } } return ret || super.onTouchEvent(event); } @Override public void computeScroll() { super.computeScroll(); if (mScroller.computeScrollOffset()) { scrollTo(mScroller.getCurrX(), mScroller.getCurrY()); refreshCenter(); invalidate(); } else { if (mFling) { mFling = false; autoSettle(); } } } public void setAdditionCenterMark(String additionCenterMark) { mAdditionCenterMark = additionCenterMark; calcIntervalDis(); invalidate(); } private void autoSettle() { int sx = getScrollX(); float dx = mCenterIndex * mIntervalDis - sx - mMaxOverScrollDistance; mScroller.startScroll(sx, 0, (int) dx, 0); invalidate(); } private void refreshCenter(int offsetX) { int offset = (int) (offsetX + mMaxOverScrollDistance); mCenterIndex = Math.round(offset / mIntervalDis); if (mCenterIndex &lt; 0) { mCenterIndex = 0; } else if (mCenterIndex &gt; mMarkCount - 1) { mCenterIndex = mMarkCount - 1; } if (null != mOnWheelItemSelectedListener) { mOnWheelItemSelectedListener.onWheelItemSelected(mCenterIndex); } } private void refreshCenter() { refreshCenter(getScrollX()); } public void selectIndex(int index) { mCenterIndex = index; post(new Runnable() { @Override public void run() { scrollTo((int) (mCenterIndex * mIntervalDis - mMaxOverScrollDistance), 0); invalidate(); refreshCenter(); } }); } public void smoothSelectIndex(int index) { if (!mScroller.isFinished()) { mScroller.abortAnimation(); } int deltaIndex = index - mCenterIndex; mScroller.startScroll(getScrollX(), 0, (int) (deltaIndex * mIntervalDis), 0); invalidate(); } public List&lt;String&gt; getItems() { return mItems; } public void setItems(List&lt;String&gt; items) { mItems = items; mMarkCount = null == mItems ? 0 : mItems.size(); mCenterIndex = Math.min(mCenterIndex, mMarkCount); calcIntervalDis(); invalidate(); } public int getSelectedPosition() { return mCenterIndex; } public void setOnWheelItemSelectedListener(OnWheelItemSelectedListener onWheelItemSelectedListener) { mOnWheelItemSelectedListener = onWheelItemSelectedListener; } @Override public boolean onDown(MotionEvent e) { if (!mScroller.isFinished()) { mScroller.forceFinished(false); } mFling = false; if (null != getParent()) { getParent().requestDisallowInterceptTouchEvent(true); } return true; } @Override public void onShowPress(MotionEvent e) { } @Override public boolean onSingleTapUp(MotionEvent e) { playSoundEffect(SoundEffectConstants.CLICK); refreshCenter((int) (getScrollX() + e.getX() - mMaxOverScrollDistance)); autoSettle(); return true; } @Override public void onLongPress(MotionEvent e) { } @Override public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) { float dis = distanceX; float scrollX = getScrollX(); if (scrollX &lt; 2 * -mMaxOverScrollDistance) { dis = 0; } else if (scrollX &lt; -mMaxOverScrollDistance) { dis = distanceX / 4.f; } else if (scrollX &gt; mContentRectF.width()) { dis = 0; } else if (scrollX &gt; mContentRectF.width() - mMaxOverScrollDistance) { dis = distanceX / 4.f; } scrollBy((int) dis, 0); refreshCenter(); return true; } @Override public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) { float scrollX = getScrollX(); if (scrollX &lt; -mMaxOverScrollDistance || scrollX &gt; mContentRectF.width() - mMaxOverScrollDistance) { return false; } else { mFling = true; fling((int) -velocityX, 0); return true; } } @Override public Parcelable onSaveInstanceState() { Parcelable superState = super.onSaveInstanceState(); SavedState ss = new SavedState(superState); ss.index = getSelectedPosition(); return ss; } @Override public void onRestoreInstanceState(Parcelable state) { SavedState ss = (SavedState) state; super.onRestoreInstanceState(ss.getSuperState()); selectIndex(ss.index); requestLayout(); } static class SavedState extends BaseSavedState { int index; public static final Parcelable.Creator&lt;SavedState&gt; CREATOR = new Parcelable.Creator&lt;SavedState&gt;() { public SavedState createFromParcel(Parcel in) { return new SavedState(in); } public SavedState[] newArray(int size) { return new SavedState[size]; } }; SavedState(Parcelable superState) { super(superState); } private SavedState(Parcel in) { super(in); index = (int) in.readValue(null); } @Override public void writeToParcel(Parcel out, int flags) { super.writeToParcel(out, flags); out.writeValue(index); } @Override public String toString() { return &quot;WheelView.SavedState{&quot; + Integer.toHexString(System.identityHashCode(this)) + &quot; index=&quot; + index + &quot;}&quot;; } } public interface OnWheelItemSelectedListener { void onWheelItemSelected(int position); } } 致谢： lantouzi的WheelView-Android","categories":[{"name":"Android View","slug":"Android-View","permalink":"http://www.code4a.com/categories/Android-View/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://www.code4a.com/tags/Android/"}]},{"title":"添加网易云音乐","slug":"music-163","date":"2015-11-12T16:44:45.000Z","updated":"2017-10-23T10:48:21.984Z","comments":true,"path":"2015/11/13/music-163/","link":"","permalink":"http://www.code4a.com/2015/11/13/music-163/","excerpt":"","text":"为个人博客添加网易云音乐首先进入到网易云音乐然后可以创建新的歌单，也可使用已有的歌单 点击生成外链播放器，调整如下图界面 复制下边的html代码直接粘贴到markdown文件中即可","categories":[{"name":"play","slug":"play","permalink":"http://www.code4a.com/categories/play/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.code4a.com/tags/hexo/"}]},{"title":"Hexo + github创建个人博客","slug":"hexo-help-page","date":"2015-11-11T16:11:45.000Z","updated":"2017-10-23T09:51:29.294Z","comments":false,"path":"2015/11/12/hexo-help-page/","link":"","permalink":"http://www.code4a.com/2015/11/12/hexo-help-page/","excerpt":"","text":"在Mac上安装hexo打造个人博客 我起初用的是jekyll ＋ github pages的方式建立个人博客，也是一直用的这种方式维护，略微有些强迫症的我总觉得这种方式不是很满意，而且整个主题也是修改的http://yongyuan.name的模版，其中大部分细节自己也不是很清楚该怎么处理，所以并不是很适合自己的style。后来看到啦 阳春面 的博客觉得主题和模版都很棒，并且在手机上也可以自适应，非常的棒，所以就一眼相中啦，刚好这段时间，我又将自己的github的用户名改了一下，导致原有的博客也无法使用，所以就直接用了 阳春面 的这种方式重新建立个人博客 问题一：安装node.js根据 Hexo官方文档 进行配置遇到了一些问题，在此做些纪录避免再次遇到时还需要花费大量时间去搜索问题。 文档中通过nvm的方式安装node.js 而安装nvm的两种方式curl和wget尝试均失败啦，第一种是下载依赖总是失败，第二种wget这个前提需要安装wget，而wget也是需要提前安装一些依赖，尝试好久，还是失败。最后没办法直接从 Node.js 网站下载pkg进行安装，此时node 和 npm 都成功安装，省去不少麻烦。 问题二：安装hexo此时使用 npm install -g hexo-cli 会出现权限相关的问题，根据出现的问题google，baidu给出的方案都是无法解决 最终在hexojs/hexo 中尝试成功. 使用 sudo npm install -g -unsafe-perm hexo 安装成功！随即将容易出现的几个点标记一下，防止下次再犯，也可帮助出现同样问题的童鞋尽快找到答案。 所有的问题回头看看也没有什么太复杂的，万事开头难。遇到问题需要的还是耐心，有耐心终会找打解决方案！使用jacman主题如何自定义多说HelloDog的文章中描述啦本地化多说embed.js，但是具体代码块的位置不是很容易找到，再次记录一下。/.../themes/jacman/layout/_partial/after_footer.ejs 找到其中的多说的js代码修改即可 参考致谢 Jark’s Blog如何使用 Jacman 主题 HelloDog Jacman基于Pacman修改的Hexo主题 GitHub Pages 绑定来自阿里云的域名 多说自定义CSS动感头像和多说评论显示User Agent的那些小事","categories":[{"name":"hexo","slug":"hexo","permalink":"http://www.code4a.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.code4a.com/tags/hexo/"}]}]}